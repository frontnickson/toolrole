import { apiService } from './index';
import type { Board } from '../../types/board';
import type { ApiResponse } from '../../types';

/**
 * API —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ—Å–∫–∞–º–∏
 */
export const boardsApi = {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserBoards(): Promise<ApiResponse<Board[]>> {
    console.log('üìã boardsApi: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const response = await apiService.get<Board[]>('/boards');
    console.log('üìã boardsApi: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response);
    return response;
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å–∫—É –ø–æ ID
   */
  async getBoard(boardId: string): Promise<ApiResponse<Board>> {
    return apiService.get<Board>(`/boards/${boardId}`);
  },

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –¥–æ—Å–∫—É
   */
  async createBoard(boardData: Partial<Board>): Promise<ApiResponse<Board>> {
    return apiService.post<Board>('/boards', boardData);
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å–∫—É
   */
  async updateBoard(boardId: string, updates: Partial<Board>): Promise<ApiResponse<Board>> {
    return apiService.put<Board>(`/boards/${boardId}`, updates);
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å –¥–æ—Å–∫—É
   */
  async deleteBoard(boardId: string): Promise<ApiResponse<{ message: string }>> {
    console.log('üóëÔ∏è boardsApi: –£–¥–∞–ª—è–µ–º –¥–æ—Å–∫—É —Å ID:', boardId);
    return apiService.delete<{ message: string }>(`/boards/${boardId}`);
  },

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
   */
  async toggleFavorite(boardId: string): Promise<ApiResponse<Board>> {
    return apiService.patch<Board>(`/boards/${boardId}/toggle-favorite`);
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å–∫–∏
   */
  async getBoardStatistics(boardId: string): Promise<ApiResponse<any>> {
    return apiService.get<any>(`/boards/${boardId}/statistics`);
  },

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ –¥–æ—Å–∫—É
   */
  async addBoardMember(boardId: string, memberData: { userId: string; role: string }): Promise<ApiResponse<any>> {
    return apiService.post<any>(`/boards/${boardId}/members`, memberData);
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –¥–æ—Å–∫–∏
   */
  async removeBoardMember(boardId: string, memberId: string): Promise<ApiResponse<{ message: string }>> {
    return apiService.delete<{ message: string }>(`/boards/${boardId}/members/${memberId}`);
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
   */
  async updateMemberRole(boardId: string, memberId: string, role: string): Promise<ApiResponse<any>> {
    return apiService.patch<any>(`/boards/${boardId}/members/${memberId}`, { role });
  }
};

import type { ApiResponse } from '../../types';
import { API_BASE_URL, API_TIMEOUT } from '../../constants';

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
 */
class ApiService {
  private baseURL: string;
  private timeout: number;
  private authToken: string | null = null;

  constructor() {
    this.baseURL = API_BASE_URL;
    this.timeout = API_TIMEOUT;
    console.log('üåê API Service: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å baseURL:', this.baseURL);
  }

  /**
   * –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
   * 
   * @param endpoint - –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API
   * @param options - –æ–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
   * @returns Promise —Å –æ—Ç–≤–µ—Ç–æ–º API
   */
  private async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<ApiResponse<T>> {
    const url = `${this.baseURL}${endpoint}`;
    
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), this.timeout);

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
      ...(options.headers as Record<string, string> || {}),
    };

    if (this.authToken) {
      headers['Authorization'] = `Bearer ${this.authToken}`;
      console.log('üîç API Service: —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', this.authToken.substring(0, 20) + '...');
    } else {
      console.log('üîç API Service: —Ç–æ–∫–µ–Ω –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    try {
      const response = await fetch(url, {
        ...options,
        signal: controller.signal,
        headers,
      });

      clearTimeout(timeoutId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç JSON
      let data: unknown;
      const contentType = response.headers.get('content-type');
      
      if (contentType && contentType.includes('application/json')) {
        data = await response.json();
      } else {
        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ JSON, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        data = { message: response.statusText || 'Non-JSON response' };
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç backend
      if (response.ok) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –ø–æ–ª–µ success
        const responseData = data as any;
        if (responseData && typeof responseData === 'object') {
          // –ï—Å–ª–∏ backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É { success, data, message }
          if ('success' in responseData) {
            return {
              success: responseData.success,
              data: responseData.data as T,
              message: responseData.message || 'Success'
            };
          }
          // –ï—Å–ª–∏ backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
          return {
            success: true,
            data: responseData as T,
            message: 'Success'
          };
        }
        
        return {
          success: true,
          data: data as T,
          message: 'Success'
        };
      } else {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –æ—Ç backend
        const responseData = data as any;
        const errorMessage = responseData?.detail || 
                           responseData?.message || 
                           `HTTP error! status: ${response.status}`;
        
        console.error('üåê API Service: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', errorMessage);
        console.error('üåê API Service: –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—à–∏–±–∫–∏:', responseData);
        
        return {
          success: false,
          data: null,
          message: errorMessage,
          error: responseData?.error || responseData // –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—à–∏–±–∫–∏
        };
      }
    } catch (error) {
      clearTimeout(timeoutId);
      
      console.error('üåê API Service: –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ:', error);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
      if (error instanceof Error) {
        if (error.name === 'AbortError') {
          console.log('üåê API Service: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞');
          throw new Error('Request timeout');
        }
        console.log('üåê API Service: –û—à–∏–±–∫–∞ Error:', error.message);
        throw error;
      }
      
      console.log('üåê API Service: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      throw new Error('Unknown error occurred');
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç GET –∑–∞–ø—Ä–æ—Å
   * 
   * @param endpoint - –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API
   * @returns Promise —Å –æ—Ç–≤–µ—Ç–æ–º API
   */
  async get<T>(endpoint: string): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, { method: 'GET' });
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç POST –∑–∞–ø—Ä–æ—Å
   * 
   * @param endpoint - –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API
   * @param data - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   * @returns Promise —Å –æ—Ç–≤–µ—Ç–æ–º API
   */
  async post<T>(endpoint: string, data?: unknown): Promise<ApiResponse<T>> {
    console.log('üåê API Service: POST –∑–∞–ø—Ä–æ—Å –Ω–∞', endpoint);
    console.log('üåê API Service: –î–∞–Ω–Ω—ã–µ:', data);
    console.log('üåê API Service: –ü–æ–ª–Ω—ã–π URL:', `${this.baseURL}${endpoint}`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–≤–∞—Ç—å –∫–∞–∫ FormData –∏–ª–∏ JSON
    const isFormData = data instanceof FormData;
    
    const headers: Record<string, string> = {};

    // –ï—Å–ª–∏ —ç—Ç–æ FormData, –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type (–±—Ä–∞—É–∑–µ—Ä —Å–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç)
    if (!isFormData) {
      headers['Content-Type'] = 'application/json';
    }

    console.log('üåê API Service: –ó–∞–≥–æ–ª–æ–≤–∫–∏:', headers);
    console.log('üåê API Service: –ú–µ—Ç–æ–¥: POST');

    return this.request<T>(endpoint, {
      method: 'POST',
      body: data ? (isFormData ? data : JSON.stringify(data)) : undefined,
      headers,
    });
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç PUT –∑–∞–ø—Ä–æ—Å
   * 
   * @param endpoint - –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API
   * @param data - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   * @returns Promise —Å –æ—Ç–≤–µ—Ç–æ–º API
   */
  async put<T>(endpoint: string, data?: unknown): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, {
      method: 'PUT',
      body: data ? JSON.stringify(data) : undefined,
    });
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç DELETE –∑–∞–ø—Ä–æ—Å
   * 
   * @param endpoint - –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API
   * @returns Promise —Å –æ—Ç–≤–µ—Ç–æ–º API
   */
  async delete<T>(endpoint: string): Promise<ApiResponse<T>> {
    console.log('üåê API Service: DELETE –∑–∞–ø—Ä–æ—Å –Ω–∞', endpoint);
    return this.request<T>(endpoint, { method: 'DELETE' });
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç PATCH –∑–∞–ø—Ä–æ—Å
   * 
   * @param endpoint - –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API
   * @param data - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   * @returns Promise —Å –æ—Ç–≤–µ—Ç–æ–º API
   */
  async patch<T>(endpoint: string, data?: unknown): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, {
      method: 'PATCH',
      body: data ? JSON.stringify(data) : undefined,
    });
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
   * 
   * @param token - JWT —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  setAuthToken(token: string): void {
    this.authToken = token;
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  clearAuthToken(): void {
    this.authToken = null;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   * 
   * @returns —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω –∏–ª–∏ null
   */
  getAuthToken(): string | null {
    return this.authToken;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   * 
   * @returns true –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
   */
  isAuthenticated(): boolean {
    return this.authToken !== null;
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const apiService = new ApiService();
export default apiService;

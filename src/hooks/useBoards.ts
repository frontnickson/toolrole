import { useState, useEffect, useCallback } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { boardsApi } from '../services/api/boards';
import { tasksApi } from '../services/api/tasks';
import { 
  setCurrentBoard, 
  addBoard, 
  replaceAllBoards,
  updateBoard, 
  updateBoardTasks,
  deleteBoard, 
  toggleFavorite 
} from '../store/slices/boardSlice';
import type { Board } from '../types/board';
import type { RootState } from '../store';

/**
 * –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ—Å–∫–∞–º–∏ —á–µ—Ä–µ–∑ API
 */
export const useBoards = () => {
  const dispatch = useDispatch();
  const { boards, currentBoard, isLoading } = useSelector((state: RootState) => state.boards);
  
  const [localLoading, setLocalLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [loadedBoardsCache, setLoadedBoardsCache] = useState<Set<string>>(new Set());

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–æ—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –∑–∞–¥–∞—á –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
  const loadUserBoards = useCallback(async () => {
    try {
      console.log('üìã useBoards: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–æ—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      setLocalLoading(true);
      setError(null);
      
      const response = await boardsApi.getUserBoards();
      console.log('üìã useBoards: –û—Ç–≤–µ—Ç –æ—Ç API:', response);
      
      if (response.success && response.data) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å–∫–∏ –±–µ–∑ –∑–∞–¥–∞—á –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        // –ó–∞–¥–∞—á–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–æ—Å–∫–∏
        const boardsWithoutTasks = response.data.map(board => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
          const hasOverdueColumn = board.columns.some(col => 
            col.title.toLowerCase().includes('–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ') || 
            col.title.toLowerCase().includes('overdue')
          );
          
          // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
          let columns = board.columns.map(column => ({
            ...column,
            tasks: [] // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º
          }));
          
          if (!hasOverdueColumn) {
            const overdueColumn = {
              id: `col-${board.id}-overdue`,
              boardId: board.id,
              title: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ',
              description: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏',
              icon: '‚ö†Ô∏è',
              color: '#DC2626',
              order: columns.length,
              isLocked: false,
              isCollapsed: false,
              isStandard: true,
              tasks: [],
              settings: {
                allowTaskCreation: false,
                allowTaskEditing: true,
                allowTaskMoving: true,
                allowTaskDeletion: true,
                allowSubtaskCreation: false,
                allowCommentCreation: true,
                allowAttachmentUpload: true,
                autoSortTasks: false,
                sortBy: 'dueDate',
                sortDirection: 'asc'
              },
              statistics: {
                totalTasks: 0,
                completedTasks: 0,
                inProgressTasks: 0,
                overdueTasks: 0,
                averageTaskDuration: 0,
                totalComments: 0,
                totalAttachments: 0,
                lastTaskUpdate: Date.now()
              },
              createdAt: Date.now(),
              updatedAt: Date.now()
            };
            columns.push(overdueColumn);
          }
          
          return {
            ...board,
            columns
          };
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º Redux store —Å –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
        dispatch(replaceAllBoards(boardsWithoutTasks));
        console.log('üìã useBoards: –î–æ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞ (–±–µ–∑ –∑–∞–¥–∞—á):', boardsWithoutTasks.length);
      } else {
        console.log('üìã useBoards: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å–æ–∫:', response.message);
        setError(response.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å–æ–∫');
        // –û—á–∏—â–∞–µ–º –¥–æ—Å–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        dispatch(replaceAllBoards([]));
      }
    } catch (err) {
      console.log('üìã useBoards: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å–æ–∫:', err);
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
      // –û—á–∏—â–∞–µ–º –¥–æ—Å–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      dispatch(replaceAllBoards([]));
    } finally {
      setLocalLoading(false);
    }
  }, [dispatch]);

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –¥–æ—Å–∫–∏
  const createBoard = useCallback(async (boardData: Partial<Board>) => {
    try {
      setLocalLoading(true);
      setError(null);
      
      const response = await boardsApi.createBoard(boardData);
      
      if (response.success && response.data) {
        dispatch(addBoard(response.data));
        console.log('üìã useBoards: –î–æ—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', response.data.title);
        return { success: true, board: response.data };
      } else {
        console.log('üìã useBoards: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏:', response.message);
        setError(response.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏');
        return { success: false, error: response.message };
      }
    } catch (err) {
      console.log('üìã useBoards: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ—Å–∫–∏:', err);
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏';
      setError(errorMessage);
      return { success: false, error: errorMessage };
    } finally {
      setLocalLoading(false);
    }
  }, [dispatch]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∏
  const updateBoardData = useCallback(async (boardId: string, updates: Partial<Board>) => {
    try {
      setLocalLoading(true);
      setError(null);
      
      const response = await boardsApi.updateBoard(boardId, updates);
      
      if (response.success && response.data) {
        dispatch(updateBoard({ boardId, updates: response.data }));
        return { success: true, board: response.data };
      } else {
        setError(response.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å–∫–∏');
        return { success: false, error: response.message };
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏';
      setError(errorMessage);
      return { success: false, error: errorMessage };
    } finally {
      setLocalLoading(false);
    }
  }, [dispatch]);

  // –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∏
  const removeBoard = useCallback(async (boardId: string) => {
    try {
      setLocalLoading(true);
      setError(null);
      
      const response = await boardsApi.deleteBoard(boardId);
      
      if (response.success) {
        dispatch(deleteBoard(boardId));
        return { success: true };
      } else {
        setError(response.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å–∫–∏');
        return { success: false, error: response.message };
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏';
      setError(errorMessage);
      return { success: false, error: errorMessage };
    } finally {
      setLocalLoading(false);
    }
  }, [dispatch]);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const toggleBoardFavorite = useCallback(async (boardId: string) => {
    try {
      setError(null);
      
      const response = await boardsApi.toggleFavorite(boardId);
      
      if (response.success && response.data) {
        dispatch(toggleFavorite(boardId));
        return { success: true, board: response.data };
      } else {
        setError(response.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
        return { success: false, error: response.message };
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏';
      setError(errorMessage);
      return { success: false, error: errorMessage };
    }
  }, [dispatch]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å–∫–∏ –ø–æ ID —Å –∑–∞–¥–∞—á–∞–º–∏
  const loadBoard = useCallback(async (boardId: string) => {
    try {
      setLocalLoading(true);
      setError(null);
      
      console.log('üìã useBoards: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å–∫—É —Å ID:', boardId);
      
      const response = await boardsApi.getBoard(boardId);
      
      if (response.success && response.data) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–æ—Å–∫–∏
        const tasksResponse = await tasksApi.getBoardTasks(boardId);
        if (tasksResponse.success && tasksResponse.data) {
          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –∫–æ–ª–æ–Ω–∫–∏
          const boardWithTasks = {
            ...response.data,
            columns: response.data.columns.map(column => ({
              ...column,
              tasks: tasksResponse.data.filter((task: any) => task.columnId === column.id)
            }))
          };
          dispatch(setCurrentBoard(boardWithTasks));
          console.log('üìã useBoards: –î–æ—Å–∫–∞ —Å –∑–∞–¥–∞—á–∞–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', boardWithTasks.title, '–ó–∞–¥–∞—á:', tasksResponse.data.length);
        } else {
          dispatch(setCurrentBoard(response.data));
          console.log('üìã useBoards: –î–æ—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –±–µ–∑ –∑–∞–¥–∞—á:', response.data.title);
        }
        return { success: true, board: response.data };
      } else {
        setError(response.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å–∫–∏');
        return { success: false, error: response.message };
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏';
      setError(errorMessage);
      return { success: false, error: errorMessage };
    } finally {
      setLocalLoading(false);
    }
  }, [dispatch]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ—Å–∫–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
  const loadBoardTasks = useCallback(async (boardId: string, forceReload = false) => {
    try {
      setError(null);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à, –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
      if (!forceReload && loadedBoardsCache.has(boardId)) {
        console.log('üìã useBoards: –ó–∞–¥–∞—á–∏ –¥–ª—è –¥–æ—Å–∫–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (–∏–∑ –∫—ç—à–∞):', boardId);
        return { success: true, fromCache: true };
      }
      
      console.log('üìã useBoards: –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–æ—Å–∫–∏:', boardId);
      
      const tasksResponse = await tasksApi.getBoardTasks(boardId);
      if (tasksResponse.success && tasksResponse.data) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
        dispatch(updateBoardTasks({ boardId, tasks: tasksResponse.data }));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
        setLoadedBoardsCache(prev => new Set(prev).add(boardId));
        
        console.log('üìã useBoards: –ó–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –¥–æ—Å–∫–∏:', boardId, '–ó–∞–¥–∞—á:', tasksResponse.data.length);
        return { success: true, tasks: tasksResponse.data };
      } else {
        setError(tasksResponse.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á');
        return { success: false, error: tasksResponse.message };
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏';
      setError(errorMessage);
      return { success: false, error: errorMessage };
    }
  }, [dispatch, loadedBoardsCache]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å–∫–∏
  const loadBoardStatistics = useCallback(async (boardId: string) => {
    try {
      setError(null);
      
      const response = await boardsApi.getBoardStatistics(boardId);
      
      if (response.success && response.data) {
        return { success: true, statistics: response.data };
      } else {
        setError(response.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        return { success: false, error: response.message };
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏';
      setError(errorMessage);
      return { success: false, error: errorMessage };
    }
  }, []);

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏
  const clearError = useCallback(() => {
    setError(null);
  }, []);

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∑–∞–¥–∞—á –¥–ª—è –¥–æ—Å–∫–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á)
  const clearBoardTasksCache = useCallback((boardId: string) => {
    setLoadedBoardsCache(prev => {
      const newCache = new Set(prev);
      newCache.delete(boardId);
      console.log('üìã useBoards: –ö—ç—à –∑–∞–¥–∞—á –æ—á–∏—â–µ–Ω –¥–ª—è –¥–æ—Å–∫–∏:', boardId);
      return newCache;
    });
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    loadUserBoards();
  }, [loadUserBoards]);

  return {
    // –î–∞–Ω–Ω—ã–µ
    boards,
    currentBoard,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è
    isLoading: isLoading || localLoading,
    error,
    
    // –î–µ–π—Å—Ç–≤–∏—è
    loadUserBoards,
    createBoard,
    updateBoard: updateBoardData,
    deleteBoard: removeBoard,
    toggleFavorite: toggleBoardFavorite,
    loadBoard,
    loadBoardTasks,
    loadBoardStatistics,
    clearError,
    clearBoardTasksCache,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    setCurrentBoard: (board: Board | null) => dispatch(setCurrentBoard(board))
  };
};

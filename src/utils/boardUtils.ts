import type {
  Board,
  Column,
  Task,
  TaskStatus,
  TaskPriority,
  Subtask,
  Comment,
  Activity,
  ActivityAction,
  ActivityDetails,
  BoardSettings,
  ColumnSettings,
  ColumnStatistics
} from '../types/board';
import {
  TaskStatus as TaskStatusEnum,
  TaskPriority as TaskPriorityEnum
} from '../types/board';
import { 
  DEFAULT_COLUMNS
} from '../constants/boardConstants';

// ===== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –û–ë–™–ï–ö–¢–û–í =====

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –¥–æ—Å–∫—É —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
 */
export const createBoard = (title: string, description: string, ownerId: string, color: string = '#007bff'): Board => {
  const now = Date.now();
  
  return {
    id: generateId(),
    title,
    description,
    icon: 'üìã',
    color,
    ownerId,
    teamId: undefined,
    members: [{
      id: generateId(),
      userId: ownerId,
      boardId: '', // –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
      role: 'owner',
      joinedAt: now,
      permissions: [],
      isActive: true,
      lastSeen: now
    }],
    columns: createDefaultColumns(),
    settings: createDefaultBoardSettings(),
    statistics: {
      totalTasks: 0,
      completedTasks: 0,
      inProgressTasks: 0,
      overdueTasks: 0,
      totalMembers: 1,
      activeMembers: 1,
      lastActivity: now,
      completionRate: 0,
      averageTaskDuration: 0,
      totalComments: 0,
      totalAttachments: 0
    },
    createdAt: now,
    updatedAt: now,
    isArchived: false,
    isPublic: false,
    isTemplate: false
  };
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤–æ–π –¥–æ—Å–∫–∏
 */
export const createDefaultColumns = (): Column[] => {
  const now = Date.now();
  
  return DEFAULT_COLUMNS.map((col) => ({
    id: generateId(),
    boardId: '', // –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
    title: col.title,
    description: col.description,
    icon: col.icon,
    color: col.color,
    order: col.order,
    isLocked: false,
    isCollapsed: false,
    taskLimit: undefined,
    wipLimit: col.wipLimit,
    tasks: [],
    settings: createDefaultColumnSettings(),
    statistics: {
      totalTasks: 0,
      completedTasks: 0,
      inProgressTasks: 0,
      overdueTasks: 0,
      lastTaskUpdate: now,
      averageTaskDuration: 0,
      totalComments: 0,
      totalAttachments: 0
    },
    createdAt: now,
    updatedAt: now
  }));
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –¥–æ—Å–∫–∏
 */
export const createDefaultBoardSettings = (): BoardSettings => {
  return {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    allowMemberInvites: true,
    allowPublicView: false,
    allowComments: true,
    allowAttachments: true,
    allowTaskCreation: true,
    allowTaskEditing: true,
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
    defaultColumnTemplate: ['planning', 'in_progress', 'review', 'testing', 'completed'],
    allowColumnCustomization: true,
    maxColumns: 10,
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á
    allowSubtaskCreation: true,
    allowTaskAssignment: true,
    allowDueDateSetting: true,
    allowPrioritySetting: true,
    allowTagging: true,
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
    autoArchiveCompleted: true,
    archiveAfterDays: 30,
    autoAssignTasks: false,
    autoNotifyAssignees: true,
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    emailNotifications: true,
    pushNotifications: true,
    desktopNotifications: true,
    
    // –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å
    showTaskDetails: 'members',
    showMemberActivity: true,
    showTaskHistory: true
  };
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏
 */
export const createDefaultColumnSettings = (): ColumnSettings => {
  return {
    allowTaskCreation: true,
    allowTaskEditing: true,
    allowTaskMoving: true,
    allowTaskDeletion: true,
    allowSubtaskCreation: true,
    allowCommentCreation: true,
    allowAttachmentUpload: true,
    autoSortTasks: false,
    sortBy: 'order',
    sortDirection: 'asc'
  };
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏
 */
export const createEmptyColumnStatistics = (): ColumnStatistics => {
  return {
    totalTasks: 0,
    completedTasks: 0,
    inProgressTasks: 0,
    overdueTasks: 0,
    averageTaskDuration: 0,
    totalComments: 0,
    totalAttachments: 0,
    lastTaskUpdate: Date.now()
  };
};

// ===== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –ó–ê–î–ê–ß =====

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
 */
export const createTask = (
  boardId: string,
  columnId: string,
  title: string,
  description: string,
  status: TaskStatus,
  priority: TaskPriority,
  assigneeId?: string,
  reporterId?: string,
  dueDate?: Date,
  tags: string[] = [],
  estimatedHours?: number
): Task => {
  const now = Date.now();
  
  return {
    id: generateId(),
    boardId,
    columnId,
    title,
    description,
    status,
    priority,
    type: 'task', // TaskTypeEnum.TASK was removed, so using 'task'
    assigneeId,
    reporterId: reporterId || 'unknown',
    watchers: reporterId ? [reporterId] : [],
    collaborators: [],
    dueDate: dueDate ? dueDate.getTime() : undefined,
    startDate: undefined,
    completedAt: undefined,
    estimatedHours,
    actualHours: 0,
    timeSpent: 0,
    tags: tags.map(tag => ({
      id: generateId(),
      name: tag,
      color: '#007bff',
      description: '',
      createdAt: now,
      createdBy: reporterId || 'unknown'
    })),
    labels: [],
    attachments: [],
    subtasks: [],
    comments: [],
    activities: [],
    statistics: {
      totalComments: 0,
      totalAttachments: 0,
      totalSubtasks: 0,
      completedSubtasks: 0,
      totalLikes: 0,
      totalViews: 0,
      lastActivityAt: now,
      timeInStatus: {
        [TaskStatusEnum.PLANNING]: 0,
        [TaskStatusEnum.IN_PROGRESS]: 0,
        [TaskStatusEnum.REVIEW]: 0,
        [TaskStatusEnum.TESTING]: 0,
        [TaskStatusEnum.COMPLETED]: 0,
        [TaskStatusEnum.CANCELLED]: 0,
        [TaskStatusEnum.BLOCKED]: 0,
        [TaskStatusEnum.ON_HOLD]: 0
      }
    },
    isArchived: false,
    isPinned: false,
    isPrivate: false,
    allowComments: true,
    allowAttachments: true,
    parentTaskId: undefined,
    epicId: undefined,
    sprintId: undefined,
    order: 0,
    customFields: {},
    createdAt: new Date(now),
    updatedAt: new Date(now),
    createdBy: reporterId || 'unknown',
    updatedBy: reporterId || 'unknown'
  };
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø–æ–¥–∑–∞–¥–∞—á—É
 */
export const createSubtask = (
  taskId: string,
  boardId: string,
  title: string,
  description: string,
  assigneeId?: string,
  priority: TaskPriority = TaskPriorityEnum.MEDIUM,
  dueDate?: Date,
  estimatedHours?: number
): Subtask => {
  const now = Date.now();
  
  return {
    id: generateId(),
    taskId,
    boardId,
    title,
    description,
    isCompleted: false,
    completedAt: undefined,
    completedBy: undefined,
    assigneeId,
    dueDate: dueDate ? dueDate.getTime() : undefined,
    priority,
    order: 0,
    estimatedHours,
    actualHours: 0,
    tags: [],
    attachments: [],
    comments: [],
    createdAt: now,
    updatedAt: now,
    createdBy: 'unknown',
  };
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
 */
export const createComment = (
  taskId: string,
  boardId: string,
  authorId: string,
  content: string,
  parentCommentId?: string
): Comment => {
  const now = Date.now();
  
  return {
    id: generateId(),
    taskId,
    boardId,
    authorId,
    content,
    contentHtml: undefined,
    mentions: [],
    attachments: [],
    isEdited: false,
    editedAt: undefined,
    editedBy: undefined,
    parentCommentId,
    replies: [],
    likes: [],
    reactions: [],
    isPinned: false,
    isPrivate: false,
    createdAt: now,
    updatedAt: now
  };
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
 */
export const createActivity = (
  taskId: string,
  boardId: string,
  userId: string,
  action: ActivityAction,
  details: Partial<ActivityDetails> = {}
): Activity => {
  const now = Date.now();
  
  return {
    id: generateId(),
    taskId,
    boardId,
    userId,
    action,
    details: {
      field: details.field || '',
      oldValue: details.oldValue || null,
      newValue: details.newValue || null,
      message: details.message || '',
      metadata: details.metadata || {},
      relatedEntityId: details.relatedEntityId || undefined,
      relatedEntityType: details.relatedEntityType || undefined
    },
    metadata: details.metadata || {},
    timestamp: now
  };
};

// ===== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –í–ê–õ–ò–î–ê–¶–ò–ò =====

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–æ—Å–∫–∏
 */
export const validateBoard = (board: Board): { isValid: boolean; errors: string[] } => {
  const errors: string[] = [];
  
  if (!board.title.trim()) {
    errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  }
  
  if (board.title.length > 20) { // MAX_VALUES.TITLE_LENGTH was removed, so using 20
    errors.push(`–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤`);
  }
  
  if (board.title.length < 3) { // MIN_VALUES.TITLE_LENGTH was removed, so using 3
    errors.push(`–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª`);
  }
  
  if (board.columns.length === 0) {
    errors.push('–î–æ—Å–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É');
  }
  
  if (board.columns.length > 20) {
    errors.push('–î–æ—Å–∫–∞ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ 20 –∫–æ–ª–æ–Ω–æ–∫');
  }
  
  if (!board.ownerId) {
    errors.push('–î–æ—Å–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞');
  }
  
  return {
    isValid: errors.length === 0,
    errors
  };
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏
 */
export const validateTask = (task: Task): { isValid: boolean; errors: string[] } => {
  const errors: string[] = [];
  
  if (!task.title.trim()) {
    errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  }
  
  if (task.title.length > 20) { // MAX_VALUES.TITLE_LENGTH was removed, so using 20
    errors.push(`–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤`);
  }
  
  if (task.title.length < 3) { // MIN_VALUES.TITLE_LENGTH was removed, so using 3
    errors.push(`–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª`);
  }
  
  if (task.description && task.description.length > 500) { // MAX_VALUES.DESCRIPTION_LENGTH was removed, so using 500
    errors.push(`–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤`);
  }
  
  if (!task.boardId) {
    errors.push('–ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –¥–æ—Å–∫–µ');
  }
  
  if (!task.columnId) {
    errors.push('–ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ–ª–æ–Ω–∫–µ');
  }
  
  if (!task.reporterId) {
    errors.push('–ó–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è');
  }
  
  return {
    isValid: errors.length === 0,
    errors
  };
};

// ===== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –û–ü–ï–†–ê–¶–ò–ô =====

/**
 * –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∑–∞–¥–∞—á—É –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏
 */
export const moveTask = (
  board: Board,
  taskId: string,
  fromColumnId: string,
  toColumnId: string,
  newOrder: number
): Board => {
  const updatedBoard = { ...board };
  
  // –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
  const fromColumn = updatedBoard.columns.find(col => col.id === fromColumnId);
  if (!fromColumn) return board;
  
  // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É
  const taskIndex = fromColumn.tasks.findIndex(task => task.id === taskId);
  if (taskIndex === -1) return board;
  
  // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
  const [task] = fromColumn.tasks.splice(taskIndex, 1);
  
  // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–µ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
  const toColumn = updatedBoard.columns.find(col => col.id === toColumnId);
  if (!toColumn) return board;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
  task.columnId = toColumnId;
  task.order = newOrder;
  task.updatedAt = new Date();
  task.updatedBy = task.assigneeId || task.reporterId;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
  toColumn.tasks.splice(newOrder, 0, task);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  updateBoardStatistics(updatedBoard);
  
  return updatedBoard;
};

export const updateColumnStatistics = (column: Column) => {
  if (column.tasks.length > 0) {
    column.statistics.lastTaskUpdate = Math.max(...column.tasks.map(t => t.updatedAt.getTime()));
  }
  
  return column.statistics;
};

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å–∫–∏
 */
export const updateBoardStatistics = (board: Board) => {
  const now = Date.now();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–æ–Ω–æ–∫
  board.columns.forEach(column => {
    updateColumnStatistics(column);
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å–∫–∏
  board.statistics.lastActivity = now;
  
  return board.statistics;
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
 */
export const canUserPerformAction = (
  user: any, // BoardMember type was removed, so using 'any' for now
  action: string,
  resource: string
): boolean => {
  // –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
  if (user.role === 'owner') return true;
  if (user.role === 'admin' && action !== 'delete') return true;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
  const hasPermission = user.permissions.some((permission: any) => 
    permission.resource === resource && permission.action === action
  );
  
  return hasPermission;
};

// ===== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –®–ê–ë–õ–û–ù–û–í =====

/**
 * –°–æ–∑–¥–∞–µ—Ç –¥–æ—Å–∫—É –∏–∑ —à–∞–±–ª–æ–Ω–∞
 */
export const createBoardFromTemplate = (
  template: any, // BoardTemplate type was removed, so using 'any' for now
  ownerId: string,
  title: string,
  description?: string,
  color?: string
): Board => {
  const now = Date.now();
  
  return {
    id: generateId(),
    title: title || template.title,
    description: description || template.description,
    icon: template.icon || 'üìã',
    color: color || template.color,
    ownerId,
    teamId: undefined,
    members: [{
      id: generateId(),
      userId: ownerId,
      boardId: '', // –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
      role: 'owner',
      joinedAt: now,
      permissions: [],
      isActive: true,
      lastSeen: now
    }],
    columns: template.columns.map((colTemplate: any) => ({ // ColumnTemplate type was removed, so using 'any' for now
      id: generateId(),
      boardId: '', // –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
      title: colTemplate.title,
      description: colTemplate.description,
      icon: colTemplate.icon,
      color: colTemplate.color,
      order: colTemplate.order,
      isLocked: false,
      isCollapsed: false,
      taskLimit: colTemplate.taskLimit,
      wipLimit: colTemplate.wipLimit,
      tasks: [],
      settings: createDefaultColumnSettings(),
      statistics: {
        totalTasks: 0,
        completedTasks: 0,
        inProgressTasks: 0,
        overdueTasks: 0,
        lastTaskUpdate: now,
        averageTaskDuration: 0,
        totalComments: 0,
        totalAttachments: 0
      },
      createdAt: now,
      updatedAt: now
    })),
    settings: template.settings || createDefaultBoardSettings(),
    statistics: {
      totalTasks: 0,
      completedTasks: 0,
      inProgressTasks: 0,
      overdueTasks: 0,
      totalMembers: 1,
      activeMembers: 1,
      lastActivity: now,
      completionRate: 0,
      averageTaskDuration: 0,
      totalComments: 0,
      totalAttachments: 0
    },
    createdAt: now,
    updatedAt: now,
    isArchived: false,
    isPublic: false,
    isTemplate: false
  };
};

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
 */
export const generateId = (): string => {
  return Date.now().toString(36) + Math.random().toString(36).substr(2);
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export const formatDate = (date: Date): string => {
  return new Intl.DateTimeFormat('ru-RU', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  }).format(date);
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
 */
export const formatRelativeTime = (date: Date): string => {
  const now = new Date();
  const diff = now.getTime() - date.getTime();
  const minutes = Math.floor(diff / (1000 * 60));
  const hours = Math.floor(diff / (1000 * 60 * 60));
  const days = Math.floor(diff / (1000 * 60 * 60 * 24));
  
  if (minutes < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
  if (minutes < 60) return `${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
  if (hours < 24) return `${hours} —á –Ω–∞–∑–∞–¥`;
  if (days < 7) return `${days} –¥–Ω –Ω–∞–∑–∞–¥`;
  
  return formatDate(date);
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
 */
export const isTaskOverdue = (task: Task): boolean => {
  if (!task.dueDate || task.status === 'completed') return false;
  return new Date(task.dueDate) < new Date();
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–¥–∞—á–∏
 */
export const getPriorityColor = (priority: TaskPriority): string => {
  return priority === 'high' ? '#dc3545' : priority === 'low' ? '#6c757d' : '#007bff';
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
 */
export const getStatusColor = (status: TaskStatus): string => {
  switch (status) {
    case 'completed': return '#28a745';
    case 'in_progress': return '#007bff';
    case 'review': return '#ffc107';
    case 'testing': return '#6f42c1';
    case 'overdue': return '#dc3545';
    case 'cancelled': return '#6c757d';
    case 'blocked': return '#dc3545';
    case 'on_hold': return '#6c757d';
    default: return '#6c757d';
  }
};

import React, { useState } from 'react';
import styles from './NewBoardModal.module.scss';
import { useSelector } from 'react-redux';
import type { RootState } from '../../../../store';
import { useBoards } from '../../../../hooks/useBoards';

interface NewBoardModalProps {
  isOpen: boolean;
  onClose: () => void;
  onCreateBoard?: (boardId: string) => void;
}

const NewBoardModal: React.FC<NewBoardModalProps> = ({ isOpen, onClose, onCreateBoard }) => {
  
  // const dispatch = useDispatch();
  const { currentUser } = useSelector((state: RootState) => state.user);
  const { createBoard } = useBoards();
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    template: 'blank',
    color: '#3B82F6',
    icon: 'üìã'
  });
  
  const [errors, setErrors] = useState<Record<string, string>>({});

  const colorOptions = [
    '#3B82F6', '#EF4444', '#10B981', '#F59E0B', '#8B5CF6',
    '#EC4899', '#06B6D4', '#84CC16', '#F97316', '#6366F1'
  ];

  const iconOptions = ['üìã', 'üìä', 'üîÑ', 'üéØ', 'üß™', '‚úÖ', 'üêõ', 'üìà', 'üöÄ', 'üí°'];

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const newErrors: Record<string, string> = {};
    if (!formData.title.trim()) {
      newErrors.title = '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }
    if (!formData.description.trim()) {
      newErrors.description = '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }

    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π –¥–æ—Å–∫–∏
    const boardData = {
      title: formData.title.trim(),
      description: formData.description.trim(),
      icon: formData.icon,
      color: formData.color,
      ownerId: currentUser?.id?.toString() || '1',
      members: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      settings: {
        allowMemberInvites: true,
        allowPublicView: false,
        allowComments: true,
        allowAttachments: true,
        allowTaskCreation: true,
        allowTaskEditing: true,
        defaultColumnTemplate: ['planning', 'in_progress', 'review', 'completed'],
        allowColumnCustomization: true,
        maxColumns: 10,
        allowSubtaskCreation: true,
        allowTaskAssignment: true,
        allowDueDateSetting: true,
        allowPrioritySetting: true,
        allowTagging: true,
        autoArchiveCompleted: false,
        archiveAfterDays: 30,
        autoAssignTasks: false,
        autoNotifyAssignees: true,
        emailNotifications: true,
        pushNotifications: true,
        desktopNotifications: true,
        showTaskDetails: 'all' as const,
        showMemberActivity: true,
        showTaskHistory: true
      },
      statistics: {
        totalTasks: 0,
        completedTasks: 0,
        inProgressTasks: 0,
        overdueTasks: 0,
        totalMembers: 1,
        activeMembers: 1,
        lastActivity: Date.now(),
        completionRate: 0,
        averageTaskDuration: 0,
        totalComments: 0,
        totalAttachments: 0
      },
      isArchived: false,
      isPublic: false,
      isTemplate: false,
      isFavorite: false,
      // –°–æ–∑–¥–∞–µ–º 4 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      columns: [
        {
          id: `col_${Date.now()}_planning`,
          boardId: '', // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
          title: '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã',
          description: '–ó–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å',
          icon: 'üìã',
          color: '#3b82f6',
          order: 0,
          isLocked: false,
          isCollapsed: false,
          isStandard: true,
          tasks: [],
          settings: {
            allowTaskCreation: true,
            allowTaskEditing: true,
            allowTaskMoving: true,
            allowTaskDeletion: true,
            allowSubtaskCreation: true,
            allowCommentCreation: true,
            allowAttachmentUpload: true,
            autoSortTasks: false,
            sortBy: 'order' as const,
            sortDirection: 'asc' as const
          },
          statistics: {
            totalTasks: 0,
            completedTasks: 0,
            inProgressTasks: 0,
            overdueTasks: 0,
            averageTaskDuration: 0,
            totalComments: 0,
            totalAttachments: 0,
            lastTaskUpdate: Date.now()
          },
          createdAt: Date.now(),
          updatedAt: Date.now()
        },
        {
          id: `col_${Date.now()}_progress`,
          boardId: '', // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
          title: '–í —Ä–∞–±–æ—Ç–µ',
          description: '–ó–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç',
          icon: '‚ö°',
          color: '#f59e0b',
          order: 1,
          isLocked: false,
          isCollapsed: false,
          isStandard: true,
          tasks: [],
          settings: {
            allowTaskCreation: true,
            allowTaskEditing: true,
            allowTaskMoving: true,
            allowTaskDeletion: true,
            allowSubtaskCreation: true,
            allowCommentCreation: true,
            allowAttachmentUpload: true,
            autoSortTasks: false,
            sortBy: 'order' as const,
            sortDirection: 'asc' as const
          },
          statistics: {
            totalTasks: 0,
            completedTasks: 0,
            inProgressTasks: 0,
            overdueTasks: 0,
            averageTaskDuration: 0,
            totalComments: 0,
            totalAttachments: 0,
            lastTaskUpdate: Date.now()
          },
          createdAt: Date.now(),
          updatedAt: Date.now()
        },
        {
          id: `col_${Date.now()}_review`,
          boardId: '', // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
          title: '–ü—Ä–æ–≤–µ—Ä–∫–∞',
          description: '–ó–∞–¥–∞—á–∏, –≥–æ—Ç–æ–≤—ã–µ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é',
          icon: 'üëÄ',
          color: '#8b5cf6',
          order: 2,
          isLocked: false,
          isCollapsed: false,
          isStandard: true,
          tasks: [],
          settings: {
            allowTaskCreation: true,
            allowTaskEditing: true,
            allowTaskMoving: true,
            allowTaskDeletion: true,
            allowSubtaskCreation: true,
            allowCommentCreation: true,
            allowAttachmentUpload: true,
            autoSortTasks: false,
            sortBy: 'order' as const,
            sortDirection: 'asc' as const
          },
          statistics: {
            totalTasks: 0,
            completedTasks: 0,
            inProgressTasks: 0,
            overdueTasks: 0,
            averageTaskDuration: 0,
            totalComments: 0,
            totalAttachments: 0,
            lastTaskUpdate: Date.now()
          },
          createdAt: Date.now(),
          updatedAt: Date.now()
        },
        {
          id: `col_${Date.now()}_completed`,
          boardId: '', // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
          title: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ',
          description: '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏',
          icon: '‚úÖ',
          color: '#10b981',
          order: 3,
          isLocked: false,
          isCollapsed: false,
          isStandard: true,
          tasks: [],
          settings: {
            allowTaskCreation: true,
            allowTaskEditing: true,
            allowTaskMoving: true,
            allowTaskDeletion: true,
            allowSubtaskCreation: true,
            allowCommentCreation: true,
            allowAttachmentUpload: true,
            autoSortTasks: false,
            sortBy: 'order' as const,
            sortDirection: 'asc' as const
          },
          statistics: {
            totalTasks: 0,
            completedTasks: 0,
            inProgressTasks: 0,
            overdueTasks: 0,
            averageTaskDuration: 0,
            totalComments: 0,
            totalAttachments: 0,
            lastTaskUpdate: Date.now()
          },
          createdAt: Date.now(),
          updatedAt: Date.now()
        },
        {
          id: `col_${Date.now()}_overdue`,
          boardId: '', // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
          title: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ',
          description: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏',
          icon: '‚ö†Ô∏è',
          color: '#DC2626',
          order: 4,
          isLocked: false,
          isCollapsed: false,
          isStandard: true,
          tasks: [],
          settings: {
            allowTaskCreation: false, // –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö
            allowTaskEditing: true,
            allowTaskMoving: true,
            allowTaskDeletion: true,
            allowSubtaskCreation: false,
            allowCommentCreation: true,
            allowAttachmentUpload: true,
            autoSortTasks: false,
            sortBy: 'dueDate' as const,
            sortDirection: 'asc' as const
          },
          statistics: {
            totalTasks: 0,
            completedTasks: 0,
            inProgressTasks: 0,
            overdueTasks: 0,
            averageTaskDuration: 0,
            totalComments: 0,
            totalAttachments: 0,
            lastTaskUpdate: Date.now()
          },
          createdAt: Date.now(),
          updatedAt: Date.now()
        }
      ]
    };

    try {
      console.log('üìã NewBoardModal: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏:', boardData);
      
      // –°–æ–∑–¥–∞–µ–º –¥–æ—Å–∫—É —á–µ—Ä–µ–∑ API
      const result = await createBoard(boardData);
      
      console.log('üìã NewBoardModal: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏:', result);
      
      if (result.success && result.board) {
        console.log('üìã NewBoardModal: –î–æ—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', result.board.title);
        
        // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        if (onCreateBoard) {
          onCreateBoard(result.board.id);
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        onClose();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        setFormData({
          title: '',
          description: '',
          template: 'blank',
          color: '#3B82F6',
          icon: 'üìã'
        });
        setErrors({});
      } else {
        console.error('üìã NewBoardModal: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏:', result.error);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        setErrors({ general: result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏' });
      }
    } catch (error) {
      console.error('üìã NewBoardModal: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ—Å–∫–∏:', error);
      setErrors({ general: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ—Å–∫–∏' });
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const handleColorSelect = (color: string) => {
    setFormData(prev => ({ ...prev, color }));
  };

  const handleIconSelect = (icon: string) => {
    setFormData(prev => ({ ...prev, icon }));
  };

  if (!isOpen) return null;

  return (
    <div className={styles.modalOverlay}>
      <div className={styles.modal}>
        <div className={styles.modalHeader}>
          <h2>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –¥–æ—Å–∫—É</h2>
          <button onClick={onClose} className={styles.closeBtn}>
            ‚úï
          </button>
        </div>

        <form onSubmit={handleSubmit} className={styles.form}>
          <div className={styles.formGroup}>
            <label htmlFor="title" className={styles.label}>
              –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏ *
            </label>
            <input
              id="title"
              type="text"
              value={formData.title}
              onChange={(e) => handleInputChange('title', e.target.value)}
              className={`${styles.input} ${errors.title ? styles.error : ''}`}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏"
            />
            {errors.title && <span className={styles.errorText}>{errors.title}</span>}
            {formData.title && (
              <div className={styles.preview}>
                <strong>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</strong> {formData.title}
              </div>
            )}
          </div>

          <div className={styles.formGroup}>
            <label htmlFor="description" className={styles.label}>
              –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å–∫–∏ *
            </label>
            <textarea
              id="description"
              value={formData.description}
              onChange={(e) => handleInputChange('description', e.target.value)}
              className={`${styles.textarea} ${errors.description ? styles.error : ''}`}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å–∫–∏"
              rows={3}
            />
            {errors.description && <span className={styles.errorText}>{errors.description}</span>}
          </div>

          <div className={styles.formGroup}>
            <label className={styles.label}>–¶–≤–µ—Ç –¥–æ—Å–∫–∏</label>
            <div className={styles.colorGrid}>
              {colorOptions.map((color) => (
                <button
                  key={color}
                  type="button"
                  className={`${styles.colorOption} ${formData.color === color ? styles.selected : ''}`}
                  style={{ backgroundColor: color }}
                  onClick={() => handleColorSelect(color)}
                  title={color}
                />
              ))}
            </div>
          </div>

          <div className={styles.formGroup}>
            <label className={styles.label}>–ò–∫–æ–Ω–∫–∞ –¥–æ—Å–∫–∏</label>
            <div className={styles.iconGrid}>
              {iconOptions.map((icon) => (
                <button
                  key={icon}
                  type="button"
                  className={`${styles.iconOption} ${formData.icon === icon ? styles.selected : ''}`}
                  onClick={() => handleIconSelect(icon)}
                  title={icon}
                >
                  {icon}
                </button>
              ))}
            </div>
          </div>

          {errors.general && (
            <div className={styles.errorMessage}>
              {errors.general}
            </div>
          )}

          <div className={styles.formActions}>
            <button type="button" onClick={onClose} className={styles.cancelBtn}>
              –û—Ç–º–µ–Ω–∞
            </button>
            <button type="submit" className={styles.createBtn}>
              –°–æ–∑–¥–∞—Ç—å –¥–æ—Å–∫—É
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default NewBoardModal;
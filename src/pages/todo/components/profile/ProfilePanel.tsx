import React, { useState, useRef, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import type { RootState } from '../../../../store';
import { updateUserProfile } from '../../../../store/slices/userSlice';
import { updateUserProfile as updateProfileAPI, uploadUserAvatar } from '../../../../services/api/users';
import styles from './ProfilePanel.module.scss';

interface ProfilePanelProps {
  onClose: () => void;
}

const ProfilePanel: React.FC<ProfilePanelProps> = ({ onClose }) => {
  
  const dispatch = useDispatch();
  const { currentUser } = useSelector((state: RootState) => state.user);
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const [isEditing, setIsEditing] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [tempData, setTempData] = useState({
    firstName: currentUser?.firstName || '',
    lastName: currentUser?.lastName || '',
    middleName: currentUser?.middleName || '',
    bio: currentUser?.bio || '',
    phoneNumber: currentUser?.phoneNumber || '',
    country: currentUser?.country || '',
    city: currentUser?.city || '',
    occupation: currentUser?.occupation || '',
    company: currentUser?.company || '',
    website: currentUser?.website || '',
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ currentUser
  useEffect(() => {
    if (currentUser) {
      setTempData({
        firstName: currentUser.firstName || '',
        lastName: currentUser.lastName || '',
        middleName: currentUser.middleName || '',
        bio: currentUser.bio || '',
        phoneNumber: currentUser.phoneNumber || '',
        country: currentUser.country || '',
        city: currentUser.city || '',
        occupation: currentUser.occupation || '',
        company: currentUser.company || '',
        website: currentUser.website || '',
      });
    }
  }, [currentUser]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
  const handleInputChange = (field: string, value: string) => {
    setTempData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
  const handlePhotoUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
    if (file.size > 5 * 1024 * 1024) {
      alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (!file.type.startsWith('image/')) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      return;
    }

    setIsLoading(true);
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const response = await uploadUserAvatar(file);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –≤ store
      dispatch(updateUserProfile({ avatarUrl: response.avatarUrl }));
      
      alert('–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ:', error);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
      let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
      
      if (error instanceof Error) {
        if (error.message.includes('401')) {
          errorMessage = '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.';
        } else if (error.message.includes('413')) {
          errorMessage = '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB.';
        } else if (error.message.includes('415')) {
          errorMessage = '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.';
        } else if (error.message.includes('500')) {
          errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        } else {
          errorMessage = `–û—à–∏–±–∫–∞: ${error.message}`;
        }
      }
      
      alert(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const handleSave = async () => {
    setIsLoading(true);
    try {
      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      console.log('üîç ProfilePanel: currentUser:', currentUser);
      console.log('üîç ProfilePanel: accessToken:', currentUser?.accessToken);
      console.log('üîç ProfilePanel: tempData:', tempData);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const updatedUser = await updateProfileAPI(tempData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ store
      dispatch(updateUserProfile(updatedUser));
      
      setIsEditing(false);
      alert('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
      let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
      
      if (error instanceof Error) {
        if (error.message.includes('401')) {
          errorMessage = '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.';
        } else if (error.message.includes('403')) {
          errorMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.';
        } else if (error.message.includes('404')) {
          errorMessage = '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.';
        } else if (error.message.includes('500')) {
          errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        } else {
          errorMessage = `–û—à–∏–±–∫–∞: ${error.message}`;
        }
      }
      
      alert(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const handleCancel = () => {
    setTempData({
      firstName: currentUser?.firstName || '',
      lastName: currentUser?.lastName || '',
      middleName: currentUser?.middleName || '',
      bio: currentUser?.bio || '',
      phoneNumber: currentUser?.phoneNumber || '',
      country: currentUser?.country || '',
      city: currentUser?.city || '',
      occupation: currentUser?.occupation || '',
      company: currentUser?.company || '',
      website: currentUser?.website || '',
    });
    setIsEditing(false);
  };

  // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getDisplayName = () => {
    if (currentUser?.firstName && currentUser?.lastName) {
      return `${currentUser.firstName} ${currentUser.lastName}`;
    }
    if (currentUser?.fullName) {
      return currentUser.fullName;
    }
    if (currentUser?.username) {
      return currentUser.username;
    }
    return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  };

  // –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getAvatar = () => {
    if (currentUser?.avatarUrl) {
      return currentUser.avatarUrl;
    }
    return getDisplayName().charAt(0).toUpperCase();
  };

  if (!currentUser) {
    return (
      <div className={styles.profilePanel}>
        <div className={styles.header}>
          <h2>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>
          <button className={styles.closeBtn} onClick={onClose}>‚úï</button>
        </div>
        <div className={styles.content}>
          <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.profilePanel}>
      <div className={styles.header}>
        <h2>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>
        <button className={styles.closeBtn} onClick={onClose}>‚úï</button>
      </div>
      
      <div className={styles.content}>
        {/* –°–µ–∫—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ */}
        <div className={styles.profileSection}>
          <div className={styles.avatarSection}>
            <div className={styles.avatarContainer}>
              <div className={styles.avatar}>
                {currentUser.avatarUrl ? (
                  <img src={currentUser.avatarUrl} alt="Avatar" />
                ) : (
                  <span>{getAvatar()}</span>
                )}
                {isLoading && <div className={styles.avatarLoader}>‚è≥</div>}
              </div>
              <button 
                className={styles.uploadBtn}
                onClick={() => fileInputRef.current?.click()}
                disabled={isLoading}
              >
                üì∑
              </button>
              <input
                ref={fileInputRef}
                type="file"
                accept="image/*"
                onChange={handlePhotoUpload}
                style={{ display: 'none' }}
              />
            </div>
            <div className={styles.userInfo}>
              <h3>{getDisplayName()}</h3>
              <p className={styles.email}>{currentUser.email}</p>
              <span className={`${styles.status} ${currentUser.isOnline ? styles.online : styles.offline}`}>
                {currentUser.isOnline ? 'üü¢ –û–Ω–ª–∞–π–Ω' : 'üî¥ –û—Ñ–ª–∞–π–Ω'}
              </span>
              {currentUser.lastSeen && (
                <p className={styles.lastSeen}>
                  –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: {new Date(currentUser.lastSeen).toLocaleString('ru-RU')}
                </p>
              )}
            </div>
          </div>
        </div>

        {/* –°–µ–∫—Ü–∏—è –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ */}
        <div className={styles.infoSection}>
          <div className={styles.sectionHeader}>
            <h4>–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
            <button 
              className={styles.editBtn}
              onClick={() => setIsEditing(!isEditing)}
            >
              {isEditing ? '‚úï' : '‚úèÔ∏è'}
            </button>
          </div>
          
          <div className={styles.infoGrid}>
            <div className={styles.infoItem}>
              <label>–ò–º—è *</label>
              {isEditing ? (
                <input
                  type="text"
                  value={tempData.firstName}
                  onChange={(e) => handleInputChange('firstName', e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
                />
              ) : (
                <span>{currentUser.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
              )}
            </div>
            
            <div className={styles.infoItem}>
              <label>–§–∞–º–∏–ª–∏—è *</label>
              {isEditing ? (
                <input
                  type="text"
                  value={tempData.lastName}
                  onChange={(e) => handleInputChange('lastName', e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"
                />
              ) : (
                <span>{currentUser.lastName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
              )}
            </div>
            
            <div className={styles.infoItem}>
              <label>–û—Ç—á–µ—Å—Ç–≤–æ</label>
              {isEditing ? (
                <input
                  type="text"
                  value={tempData.middleName}
                  onChange={(e) => handleInputChange('middleName', e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ"
                />
              ) : (
                <span>{currentUser.middleName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
              )}
            </div>
            
            <div className={styles.infoItem}>
              <label>Email</label>
              <span className={styles.readonly}>{currentUser.email}</span>
            </div>
            
            <div className={styles.infoItem}>
              <label>–¢–µ–ª–µ—Ñ–æ–Ω</label>
              {isEditing ? (
                <input
                  type="tel"
                  value={tempData.phoneNumber}
                  onChange={(e) => handleInputChange('phoneNumber', e.target.value)}
                  placeholder="+7 (999) 123-45-67"
                />
              ) : (
                <span>{currentUser.phoneNumber || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
              )}
            </div>
            
            <div className={styles.infoItem}>
              <label>–°—Ç—Ä–∞–Ω–∞</label>
              {isEditing ? (
                <input
                  type="text"
                  value={tempData.country}
                  onChange={(e) => handleInputChange('country', e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É"
                />
              ) : (
                <span>{currentUser.country || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
              )}
            </div>
            
            <div className={styles.infoItem}>
              <label>–ì–æ—Ä–æ–¥</label>
              {isEditing ? (
                <input
                  type="text"
                  value={tempData.city}
                  onChange={(e) => handleInputChange('city', e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥"
                />
              ) : (
                <span>{currentUser.city || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
              )}
            </div>
            
            <div className={styles.infoItem}>
              <label>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è</label>
              {isEditing ? (
                <input
                  type="text"
                  value={tempData.occupation}
                  onChange={(e) => handleInputChange('occupation', e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é"
                />
              ) : (
                <span>{currentUser.occupation || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
              )}
            </div>
            
            <div className={styles.infoItem}>
              <label>–ö–æ–º–ø–∞–Ω–∏—è</label>
              {isEditing ? (
                <input
                  type="text"
                  value={tempData.company}
                  onChange={(e) => handleInputChange('company', e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"
                />
              ) : (
                <span>{currentUser.company || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
              )}
            </div>
            
            <div className={styles.infoItem}>
              <label>–í–µ–±-—Å–∞–π—Ç</label>
              {isEditing ? (
                <input
                  type="url"
                  value={tempData.website}
                  onChange={(e) => handleInputChange('website', e.target.value)}
                  placeholder="https://example.com"
                />
              ) : (
                <span>{currentUser.website || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
              )}
            </div>
          </div>
          
          <div className={styles.infoItem}>
            <label>–û —Å–µ–±–µ</label>
            {isEditing ? (
              <textarea
                value={tempData.bio}
                onChange={(e) => handleInputChange('bio', e.target.value)}
                placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ..."
                rows={3}
              />
            ) : (
              <span>{currentUser.bio || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
            )}
          </div>
        </div>

        {/* –°–µ–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
        <div className={styles.statsSection}>
          <h4>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
          <div className={styles.statsGrid}>
            <div className={styles.statItem}>
              <span className={styles.statValue}>{currentUser.teams.length}</span>
              <span className={styles.statLabel}>–ö–æ–º–∞–Ω–¥</span>
            </div>
            <div className={styles.statItem}>
              <span className={styles.statValue}>{currentUser.friends.length}</span>
              <span className={styles.statLabel}>–î—Ä—É–∑–µ–π</span>
            </div>
            <div className={styles.statItem}>
              <span className={styles.statValue}>{currentUser.unreadNotificationsCount}</span>
              <span className={styles.statLabel}>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</span>
            </div>
            <div className={styles.statItem}>
              <span className={styles.statValue}>
                {new Date(currentUser.createdAt).getFullYear()}
              </span>
              <span className={styles.statLabel}>–ì–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</span>
            </div>
          </div>
        </div>

        {/* –°–µ–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π */}
        {isEditing && (
          <div className={styles.actionsSection}>
            <button 
              className={styles.saveBtn}
              onClick={handleSave}
              disabled={isLoading}
            >
              {isLoading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
            </button>
            <button 
              className={styles.cancelBtn}
              onClick={handleCancel}
              disabled={isLoading}
            >
              ‚ùå –û—Ç–º–µ–Ω–∞
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default ProfilePanel;

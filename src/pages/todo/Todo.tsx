import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import type { RootState } from '../../store';
import { toggleFavorite, setCurrentBoard, deleteBoard } from '../../store/slices/boardSlice';
import { useBoardTasks } from '../../hooks/useBoardTasks';
import { useTodoRouting } from '../../hooks/useTodoRouting';
import { useTranslation } from '../../utils/translations';
import TodoSidebar from './components/layout/TodoSidebar';
import TodoBoard from './components/board/TodoBoard';
import TodoList from './components/tasks/TodoList';
import TodoCalendar from './components/ui/TodoCalendar';
import Inbox from './components/ui/Inbox';
import HomeDashboard from './components/ui/HomeDashboard';
import NewBoardModal from './components/modals/NewBoardModal';
import BoardSettingsMenu from './components/board/BoardSettingsMenu';
import TodoSearch from './components/ui/TodoSearch';
import { ProfilePanel, SettingsPanel, SubscriptionPanel, HelpPanel } from './components/profile';
import TaskPage from './components/tasks/TaskPage';

import styles from './Todo.module.scss';

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ (Todo)
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ—Å–∫–∞–º–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º–∏
 */
const Todo: React.FC = () => {

  const navigate = useNavigate();
  const location = useLocation();
  const dispatch = useDispatch();

  const { currentUser } = useSelector((state: RootState) => state.user);
  const { currentBoard, boards, isLoading: boardsLoading } = useSelector((state: RootState) => state.boards);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ—Å–∫–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏
  const { 
    loadUserBoards, 
    deleteBoard: removeBoard, 
    loadBoardTasks,
    createTask,
    updateTask,
    deleteTask,
    moveTask
  } = useBoardTasks();
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
  const { parseCurrentRoute, updateUrl } = useTodoRouting();
  
  // –ü–µ—Ä–µ–≤–æ–¥—ã
  const { t } = useTranslation(currentUser?.language || 'ru');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ URL
  useEffect(() => {
    const routeParams = parseCurrentRoute();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑ URL
    if (routeParams.mode) {
      setViewMode(routeParams.mode);
      localStorage.setItem('viewMode', routeParams.mode);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏–∑ URL
    if (routeParams.section) {
      setActiveNavItem(routeParams.section);
      localStorage.setItem('activeNavItem', routeParams.section);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–æ—Å–∫—É –∏–∑ URL
    if (routeParams.boardId) {
      setSelectedProject(routeParams.boardId);
      localStorage.setItem('selectedBoardId', routeParams.boardId);
      
      const board = boards.find(b => b.id === routeParams.boardId);
      if (board) {
        dispatch(setCurrentBoard(board));
      }
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –∏–∑ URL
    if (routeParams.taskId) {
      setSelectedTaskId(routeParams.taskId);
    } else {
      setSelectedTaskId(null);
    }
  }, [location.pathname, boards, dispatch, parseCurrentRoute]);

  const [selectedProject, setSelectedProject] = useState<string>(() => {
    return localStorage.getItem('selectedBoardId') || '';
  });

  const [viewMode, setViewMode] = useState<'list' | 'board' | 'calendar'>(() => {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑ localStorage
    return (localStorage.getItem('viewMode') as 'list' | 'board' | 'calendar') || 'board';
  });

  const [activeNavItem, setActiveNavItem] = useState<'inbox' | 'today' | 'home' | null>(() => {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–∑ localStorage
    const saved = localStorage.getItem('activeNavItem');
    return saved === 'inbox' || saved === 'today' || saved === 'home' ? saved : null;
  });

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  // console.log('üîç Todo component - boards state:', {
  //   boards,
  //   boardsLength: boards.length,
  //   boardsLoading,
  //   currentBoard: currentBoard?.id,
  //   selectedProject,
  //   viewMode,
  //   activeNavItem
  // });

  const [isNewBoardModalOpen, setIsNewBoardModalOpen] = useState(false);
  const [isSettingsMenuOpen, setIsSettingsMenuOpen] = useState(false);
  const [isSearchOpen, setIsSearchOpen] = useState(false);
  const [isUpdatingFavorite, setIsUpdatingFavorite] = useState(false);
  const [rightPanelContent, setRightPanelContent] = useState<'profile' | 'settings' | 'subscription' | 'help' | null>(null);
  const [selectedTaskId, setSelectedTaskId] = useState<string | null>(null);

  const userBoards = boards.filter(board => {
    const isOwner = currentUser?.id && board.ownerId === currentUser.id.toString();
    return isOwner;
  });

  /**
   * @param projectId - ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞/–¥–æ—Å–∫–∏
   */
  const handleProjectChange = async (projectId: string) => {
    setSelectedProject(projectId);
    setViewMode('board'); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞ board –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞
    setActiveNavItem(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    setSelectedTaskId(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–∏ —Å–º–µ–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    setRightPanelContent(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è

    const selectedBoard = boards.find(board => board.id === projectId);
    
    if (selectedBoard) {
      // –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ—Å–∫—É –∫–∞–∫ —Ç–µ–∫—É—â—É—é
      dispatch(setCurrentBoard(selectedBoard));
      localStorage.setItem('selectedBoardId', projectId);
      localStorage.setItem('viewMode', 'board');
      localStorage.setItem('activeNavItem', '');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º URL
      updateUrl({ mode: 'board', boardId: projectId, section: undefined, taskId: undefined });
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–æ—Å–∫–∏
      console.log('üìã Todo: –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–æ—Å–∫–∏:', projectId);
      try {
        const result = await loadBoardTasks(projectId);
        if (result.success) {
          console.log('üìã Todo: –ó–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –¥–æ—Å–∫–∏:', projectId);
        } else {
          console.error('üìã Todo: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á:', result.error);
        }
      } catch (error) {
        console.error('üìã Todo: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á:', error);
      }
    }
  };
  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ Today –≤ —Å–∞–π–¥–±–∞—Ä–µ
   * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
   */
  const handleTodayClick = () => {
    setViewMode('calendar');
    setActiveNavItem('today');
    setSelectedTaskId(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
    setRightPanelContent(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
    setSelectedProject('');
    dispatch(setCurrentBoard(null));
    localStorage.removeItem('selectedBoardId');
    localStorage.setItem('viewMode', 'calendar');
    localStorage.setItem('activeNavItem', 'today');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º URL
    updateUrl({ section: 'today', mode: undefined, boardId: undefined, taskId: undefined });
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ Inbox –≤ —Å–∞–π–¥–±–∞—Ä–µ
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  const handleInboxClick = () => {
    setActiveNavItem('inbox');
    setSelectedTaskId(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
    setRightPanelContent(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è
    setSelectedProject('');
    dispatch(setCurrentBoard(null));
    localStorage.removeItem('selectedBoardId');
    localStorage.setItem('activeNavItem', 'inbox');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º URL
    updateUrl({ section: 'inbox', mode: undefined, boardId: undefined, taskId: undefined });
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –ì–ª–∞–≤–Ω–∞—è –≤ —Å–∞–π–¥–±–∞—Ä–µ
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥ —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
   */
  const handleHomeClick = () => {
    setActiveNavItem('home');
    setSelectedTaskId(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
    setRightPanelContent(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è
    
    // –û–±–Ω–æ–≤–ª—è–µ–º URL
    updateUrl({ section: 'home', mode: undefined, boardId: undefined, taskId: undefined });
    setSelectedProject('');
    dispatch(setCurrentBoard(null));
    localStorage.removeItem('selectedBoardId');
    localStorage.setItem('activeNavItem', 'home');
  };

  /**
   * –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏
   */
  const openProfile = () => {
    setSelectedTaskId(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
    setRightPanelContent('profile'); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–∞–Ω–µ–ª—å)
  };
  const openSettings = () => {
    setSelectedTaskId(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
    setRightPanelContent('settings'); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–∞–Ω–µ–ª—å)
  };
  const openSubscription = () => {
    setSelectedTaskId(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
    setRightPanelContent('subscription'); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–∞–Ω–µ–ª—å)
  };

  const openPremiumUpgrade = () => {
    setSelectedTaskId(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
    setRightPanelContent('subscription'); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–∞–Ω–µ–ª—å)
  };
  const openHelp = () => {
    setSelectedTaskId(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
    setRightPanelContent('help'); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–º–æ—â—å (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–∞–Ω–µ–ª—å)
  };
  const closeRightPanel = () => {
    setRightPanelContent(null);
    setSelectedTaskId(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏
  };

  /**
   */
  React.useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if ((event.ctrlKey || event.metaKey) && event.key === 'k') {
        event.preventDefault();
        setIsSearchOpen(true);
      }

      // –ì–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –¥–æ—Å–∫–∏
      if ((event.ctrlKey || event.metaKey) && event.key === 'n') {
        event.preventDefault();
        if (currentUser) {
          setIsNewBoardModalOpen(true);
        }
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [currentUser]);

  // –î–æ—Å–∫–∏ —Ç–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ useAuth –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  // useEffect(() => {
  //   if (currentUser) {
  //     loadUserBoards();
  //   }
  // }, [currentUser, loadUserBoards]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–æ—Å–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (selectedProject && boards.length > 0 && currentBoard && currentBoard.id === selectedProject) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∏ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
      const hasTasks = currentBoard.columns.some(column => column.tasks && column.tasks.length > 0);
      
      if (!hasTasks) {
        console.log('üìã Todo: –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–æ—Å–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', selectedProject);
        loadBoardTasks(selectedProject);
      }
    }
  }, [selectedProject, boards, currentBoard, loadBoardTasks]);

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ localStorage –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (boards.length > 0 && !selectedProject) {
      setSelectedProject(boards[0].id);
    }
  }, [boards, selectedProject]);

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º viewMode –∏ activeNavItem –∏–∑ localStorage
  useEffect(() => {
    const savedViewMode = localStorage.getItem('todoViewMode');
    const savedActiveNavItem = localStorage.getItem('todoActiveNavItem');

    if (savedViewMode) {
      setViewMode(savedViewMode as 'board' | 'list' | 'calendar');
    }

    if (savedActiveNavItem) {
      setActiveNavItem(savedActiveNavItem as 'inbox' | 'today' | 'home' | null);
    }
  }, []);

  React.useEffect(() => {
    if (!currentUser) {
      navigate('/auth');
      return;
    }

    // –ï—Å–ª–∏ –¥–æ—Å–∫–∏ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ localStorage
    if (boards.length > 0) {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–æ—Å–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –≤ localStorage
      const savedBoardId = localStorage.getItem('selectedBoardId');
      if (savedBoardId && boards.find(board => board.id === savedBoardId)) {
        const savedBoard = boards.find(board => board.id === savedBoardId);
        if (savedBoard) {
          dispatch(setCurrentBoard(savedBoard));
        }
      }
    }
  }, [currentUser, boards, dispatch, navigate, selectedProject, viewMode, activeNavItem]);


  /**
   * @param taskId - ID –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
   */

  const handleTaskClick = (taskId: string) => {
    try {
      setRightPanelContent(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è
      setSelectedTaskId(taskId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º URL —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const currentParams = parseCurrentRoute();
      updateUrl({ 
        taskId, 
        mode: currentParams.mode || (selectedProject ? 'board' : undefined),
        boardId: currentParams.boardId || selectedProject,
        section: currentParams.section
      });
    } catch {
      // –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }
  };

  const handleCreateBoard = (newBoardId?: string) => {
    if (newBoardId) {
      const newBoard = boards.find(board => board.id === newBoardId);
      if (newBoard) {
        setSelectedProject(newBoardId);
        dispatch(setCurrentBoard(newBoard));
        localStorage.setItem('selectedBoardId', newBoardId);
      }
    }

    setIsNewBoardModalOpen(false);
    setRightPanelContent(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è
  };

  const handleAddToFavorites = async () => {
    if (currentBoard && !isUpdatingFavorite) {
      setIsUpdatingFavorite(true);

      try {
        dispatch(toggleFavorite(currentBoard.id));

        await new Promise(resolve => setTimeout(resolve, 50));

        setIsSettingsMenuOpen(false);
        setRightPanelContent(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è
        setTimeout(() => setIsSettingsMenuOpen(true), 10);
      } finally {
        setIsUpdatingFavorite(false);
      }
    }
  };

  const handleDelete = async () => {
    if (currentBoard) {
      const totalTasks = currentBoard.columns.reduce((total, column) => total + column.tasks.length, 0);

      const userBoards = boards.filter(board =>
        board.ownerId === currentUser?.id?.toString()
      );

      let confirmMessage = `üóëÔ∏è  –£–î–ê–õ–ï–ù–ò–ï –î–û–°–ö–ò\n\n` +
        `–ù–∞–∑–≤–∞–Ω–∏–µ: "${currentBoard.title}"\n`;

      if (totalTasks > 0) {
        confirmMessage += `üìã –ó–∞–¥–∞—á –≤ –¥–æ—Å–∫–µ: ${totalTasks}\n`;
      }

      if (userBoards.length === 1) {
        confirmMessage += `üö®  –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –≠—Ç–æ –≤–∞—à–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –¥–æ—Å–∫–∞!\n` +
          `–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —É –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–∏ –æ–¥–Ω–æ–π –¥–æ—Å–∫–∏.\n\n`;
      }

      confirmMessage += `‚ö†Ô∏è  –ü–û–°–õ–ï–î–°–¢–í–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø:\n` +
        `‚Ä¢ –í—Å–µ –∑–∞–¥–∞—á–∏ –∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã\n` +
        `‚Ä¢ –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å\n` +
        `‚Ä¢ –î–æ—Å–∫–∞ –∏—Å—á–µ–∑–Ω–µ—Ç –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤\n\n` +
        `–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏: "${currentBoard.title}"\n\n` +
        `–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"`;

      const userInput = prompt(confirmMessage);

      if (userInput === currentBoard.title) {
        if (userBoards.length === 1) {
          const finalConfirm = confirm(
            `üö®  –§–ò–ù–ê–õ–¨–ù–û–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï!\n\n` +
            `–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –¥–æ—Å–∫—É "${currentBoard.title}"?\n\n` +
            `–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —É –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–∏ –æ–¥–Ω–æ–π –¥–æ—Å–∫–∏, –∏ –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—É—é —Å –Ω—É–ª—è.`
          );

          if (!finalConfirm) {
            alert('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –î–æ—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.');
            return;
          }
        }

        // –£–¥–∞–ª—è–µ–º –¥–æ—Å–∫—É —á–µ—Ä–µ–∑ API
        console.log('üóëÔ∏è Todo: –£–¥–∞–ª—è–µ–º –¥–æ—Å–∫—É:', currentBoard.title, 'ID:', currentBoard.id);
        const result = await removeBoard(currentBoard.id);
        
        if (result.success) {
          setIsSettingsMenuOpen(false);
          setRightPanelContent(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è

          if (selectedProject === currentBoard.id) {
            setSelectedProject('');
            localStorage.removeItem('selectedBoardId');
          }
          
          alert('‚úÖ –î–æ—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!');
        } else {
          alert(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ—Å–∫–∏: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }


      } else if (userInput !== null) {
        alert('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
      }
    }
  };

  const handleArchive = () => {
    if (confirm('–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å–∫—É?')) {
      setIsSettingsMenuOpen(false);
      setRightPanelContent(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è
    }
  };

  const handleDuplicate = () => {
    setIsSettingsMenuOpen(false);
    setRightPanelContent(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è
  };

  const handleShare = () => {
    setIsSettingsMenuOpen(false);
    setRightPanelContent(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è
  };

  const getProjectTasks = () => {
    // console.log('üîç getProjectTasks called with currentBoard:', currentBoard);

    if (!currentBoard || !currentBoard.columns) {
      // console.log('üîç No currentBoard or columns, returning empty array');
      return [];
    }

    const filteredColumns = currentBoard.columns.filter(column => column && column.tasks);
    // console.log('üîç Filtered columns:', filteredColumns);

    const projectTasks = filteredColumns
      .flatMap(column =>
        column.tasks.filter(task => task && typeof task === 'object')
      );

    // console.log('üîç getProjectTasks result:', projectTasks);
    return projectTasks;
  };

  const getAllTasks = () => {
    // console.log('üîç getAllTasks called with boards:', boards);

    const filteredBoards = boards.filter(board => board && board.columns);
    // console.log('üîç Filtered boards:', filteredBoards);

    const allTasks = filteredBoards
      .flatMap(board =>
        board.columns
          .filter(column => column && column.tasks)
          .flatMap(column =>
            column.tasks.filter(task => task && typeof task === 'object')
          )
      );

    // console.log('üîç getAllTasks result:', allTasks);
    return allTasks;
  };

  const renderContentView = () => {
    const projectTasks = getProjectTasks();
    const allTasks = getAllTasks();

    switch (viewMode) {
      case 'list':
        return (
          <TodoList
            tasks={projectTasks}
            onUpdateTask={() => { }}
            onDeleteTask={() => { }}
            onToggleStatus={() => { }}
            onTaskClick={handleTaskClick}
          />
        );
      case 'board':
        return (
          <TodoBoard
            onTaskClick={handleTaskClick}
            onCreateBoard={() => setIsNewBoardModalOpen(true)}
          />
        );
      case 'calendar':
        return boardsLoading ? (
          <div className={styles.loading}>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...</p>
          </div>
        ) : (
          <TodoCalendar
            tasks={selectedProject ? projectTasks : allTasks}
            onTaskClick={handleTaskClick}
            showAllTasks={!selectedProject}
          />
        );
      default:
        return null;
    }
  };

  return (
    <div className={styles.todoPage}>
      {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏/–¥–æ—Å–∫–∞–º–∏ */}
      <TodoSidebar
        selectedProject={selectedProject}
        onProjectChange={handleProjectChange}
        onTodayClick={handleTodayClick}
        onInboxClick={handleInboxClick}
        onHomeClick={handleHomeClick}
        activeNavItem={activeNavItem}
        onOpenProfile={openProfile}
        onOpenSettings={openSettings}
        onOpenSubscription={openSubscription}
        onOpenHelp={openHelp}
        onCreateBoard={() => setIsNewBoardModalOpen(true)}
        onPremiumUpgrade={openPremiumUpgrade}
      />

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <div className={styles.mainContent}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ */}
        {!rightPanelContent && !selectedTaskId && (userBoards.length > 0 || !selectedProject || activeNavItem === 'inbox') && (
          <div className={styles.header}>
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ */}
            <div className={styles.projectInfo}>
              <div className={styles.breadcrumbs}>
                <span>{t('navigation.project_management')}</span>
                <span>/</span>
                <span className={styles.currentProject}>
                  {rightPanelContent === 'profile' ? t('navigation.profile') :
                    rightPanelContent === 'settings' ? t('navigation.settings') :
                      rightPanelContent === 'subscription' ? t('navigation.subscription') :
                        rightPanelContent === 'help' ? t('navigation.help') :
                          activeNavItem === 'inbox' ? t('navigation.inbox') :
                            activeNavItem === 'home' ? t('navigation.home') :
                              !selectedProject ? t('navigation.today') :
                                (currentBoard?.title || t('navigation.board_not_selected'))}
                </span>
              </div>
              <p className={styles.description}>
                {rightPanelContent === 'profile'
                  ? t('navigation.manage_profile')
                  : rightPanelContent === 'settings'
                    ? t('navigation.configure_app')
                    : rightPanelContent === 'subscription'
                      ? t('navigation.choose_subscription')
                      : rightPanelContent === 'help'
                        ? t('navigation.get_help')
                        : activeNavItem === 'inbox'
                          ? t('navigation.manage_messages')
                          : activeNavItem === 'home'
                            ? t('navigation.general_statistics')
                            : !selectedProject
                              ? t('navigation.today_tasks')
                              : (currentBoard?.description || t('navigation.task_management_system'))
                }
              </p>
            </div>

            {/* –î–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ */}
            <div className={styles.headerActions}>
              {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —Ä–µ–∂–∏–º–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
              {selectedProject && !activeNavItem && (
                <div className={styles.viewToggles}>
                  <button
                    className={`${styles.viewBtn} ${viewMode === 'list' ? styles.active : ''}`}
                    onClick={() => {
                      setViewMode('list');
                      localStorage.setItem('viewMode', 'list');
                      setActiveNavItem(null);
                      // –û–±–Ω–æ–≤–ª—è–µ–º URL
                      updateUrl({ mode: 'list', section: undefined, taskId: undefined });
                    }}
                  >
                    {t('navigation.list')}
                  </button>
                  <button
                    className={`${styles.viewBtn} ${viewMode === 'board' ? styles.active : ''}`}
                    onClick={() => {
                      setViewMode('board');
                      localStorage.setItem('viewMode', 'board');
                      setActiveNavItem(null);
                      // –û–±–Ω–æ–≤–ª—è–µ–º URL
                      updateUrl({ mode: 'board', section: undefined, taskId: undefined });
                    }}
                  >
                    {t('navigation.board')}
                  </button>
                  <button
                    className={`${styles.viewBtn} ${viewMode === 'calendar' ? styles.active : ''}`}
                    onClick={() => {
                      setViewMode('calendar');
                      localStorage.setItem('viewMode', 'calendar');
                      setActiveNavItem(null);
                      // –û–±–Ω–æ–≤–ª—è–µ–º URL
                      updateUrl({ mode: 'calendar', section: undefined, taskId: undefined });
                    }}
                  >
                    {t('navigation.calendar')}
                  </button>
                </div>
              )}

              {/* –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
              <div className={styles.globalActions}>
                {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ —Å –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–µ–π */}
                <button
                  className={styles.searchBtn}
                  onClick={() => setIsSearchOpen(true)}
                  title="–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á (Ctrl+K)"
                >
                  üîç {t('tasks.search_tasks')}
                  <span className={styles.shortcut}>‚åòK</span>
                </button>
                {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –¥–æ—Å–∫–∏ */}
                <button
                  className={styles.createBoardBtn}
                  onClick={() => setIsNewBoardModalOpen(true)}
                  title={t('navigation.create_new_board_shortcut')}
                >
                  <span className={styles.createIcon}>‚ûï</span>
                  <span>{t('navigation.create_board')}</span>
                </button>


                {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å–∫–∏ */}
                {selectedProject && !activeNavItem && (
                  <div className={styles.settingsContainer}>
                    <button
                      className={`${styles.actionBtn} ${isSettingsMenuOpen ? styles.active : ''}`}
                      onClick={() => setIsSettingsMenuOpen(!isSettingsMenuOpen)}
                      title={t('navigation.board_settings')}
                      disabled={!currentBoard}
                    >
                      ‚ãØ
                    </button>

                    {/* –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å–∫–∏ */}
                    {isSettingsMenuOpen && currentBoard && (
                      <BoardSettingsMenu
                        key={`${currentBoard?.id}-${currentBoard?.isFavorite}`}
                        isOpen={isSettingsMenuOpen}
                        onClose={() => setIsSettingsMenuOpen(false)}
                        onAddToFavorites={handleAddToFavorites}
                        onDelete={handleDelete}
                        onArchive={handleArchive}
                        onDuplicate={handleDuplicate}
                        onShare={handleShare}
                        isFavorite={currentBoard?.isFavorite || false}
                        isUpdatingFavorite={isUpdatingFavorite}
                      />
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –∑–∞–¥–∞—á–∞–º–∏ */}
        <div className={styles.content}>
          {selectedTaskId ? (
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º TaskPage –≤–º–µ—Å—Ç–æ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            <TaskPage
              taskId={selectedTaskId}
              onClose={() => {
                setSelectedTaskId(null);
                setRightPanelContent(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è
                navigate('/todo');
              }}
            />
          ) : rightPanelContent === 'profile' ? (
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            <ProfilePanel onClose={closeRightPanel} />
          ) : rightPanelContent === 'settings' ? (
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            <SettingsPanel onClose={closeRightPanel} />
          ) : rightPanelContent === 'subscription' ? (
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            <SubscriptionPanel onClose={closeRightPanel} />
          ) : rightPanelContent === 'help' ? (
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
            <HelpPanel onClose={closeRightPanel} />
          ) : activeNavItem === 'inbox' ? (
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Inbox
            <Inbox />
          ) : activeNavItem === 'home' ? (
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ì–ª–∞–≤–Ω–∞—è (–¥–∞—à–±–æ—Ä–¥)
            <HomeDashboard />
          ) : activeNavItem === 'today' ? (
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Today - –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ viewMode
            (() => {
              switch (viewMode) {
                case 'list':
                  return (
                    <TodoList
                      tasks={getAllTasks()}
                      onUpdateTask={() => { }}
                      onDeleteTask={() => { }}
                      onToggleStatus={() => { }}
                      onTaskClick={handleTaskClick}
                    />
                  );
                case 'board':
                  return (
                    <TodoBoard
                      onTaskClick={handleTaskClick}
                      onCreateBoard={() => setIsNewBoardModalOpen(true)}
                      showAllTasks={true}
                    />
                  );
                case 'calendar':
                  return boardsLoading ? (
                    <div className={styles.loading}>
                      <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...</p>
                    </div>
                  ) : (
                    <TodoCalendar
                      tasks={getAllTasks()}
                      onTaskClick={handleTaskClick}
                      showAllTasks={true}
                    />
                  );
                default:
                  return null;
              }
            })()
          ) : !selectedProject ? (
            // –í —Ä–µ–∂–∏–º–µ Today –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ viewMode
            (() => {
              switch (viewMode) {
                case 'list':
                  return (
                    <TodoList
                      tasks={getAllTasks()}
                      onUpdateTask={() => { }}
                      onDeleteTask={() => { }}
                      onToggleStatus={() => { }}
                      onTaskClick={handleTaskClick}
                    />
                  );
                case 'board':
                  return (
                    <TodoBoard
                      onTaskClick={handleTaskClick}
                      onCreateBoard={() => setIsNewBoardModalOpen(true)}
                      showAllTasks={!selectedProject}
                    />
                  );
                case 'calendar':
                  return boardsLoading ? (
                    <div className={styles.loading}>
                      <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...</p>
                    </div>
                  ) : (
                    <TodoCalendar
                      tasks={getAllTasks()}
                      onTaskClick={handleTaskClick}
                      showAllTasks={!selectedProject}
                    />
                  );
                default:
                  return null;
              }
            })()
          ) : (
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            renderContentView()
          )}
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –¥–æ—Å–∫–∏ */}
      <NewBoardModal
        isOpen={isNewBoardModalOpen}
        onClose={() => {
          setIsNewBoardModalOpen(false);
          setRightPanelContent(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è
        }}
        onCreateBoard={handleCreateBoard}
      />

      {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á */}
      <TodoSearch
        tasks={activeNavItem === 'inbox' ? [] : (selectedProject ? getProjectTasks() : getAllTasks())}
        onTaskClick={handleTaskClick}
        isOpen={isSearchOpen}
        onClose={() => {
          setIsSearchOpen(false);
          setRightPanelContent(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è
        }}
      />
    </div>
  );
};

export default Todo;


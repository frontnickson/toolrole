import { createSlice, type PayloadAction } from '@reduxjs/toolkit';
import type { Board, Column, Task, TaskStatus, TaskPriority, TaskType } from '../../types';
import type { BoardState } from '../../types/state';
import { notificationService } from '../../services/notificationService';

// ===== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø API =====
// localStorage –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å —Å–µ—Ä–≤–µ—Ä–∞

// ===== –°–¢–ê–ù–î–ê–†–¢–ù–´–ï –ö–û–õ–û–ù–ö–ò =====
// –≠—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ—Å–∫–∏ –∏ –∑–∞—â–∏—â–µ–Ω—ã –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –∏—Ö –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å

const createStandardColumns = (boardId: string): Column[] => [
  {
    id: `col-${boardId}-planning`,
    boardId: boardId,
    title: '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã',
    description: '–ó–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å',
    icon: 'üìã',
    color: '#3b82f6',
    order: 0,
    isLocked: false,
    isCollapsed: false,
    isStandard: true,
    tasks: [
      {
        id: 'test-task-1',
        boardId: boardId,
        columnId: `col-${boardId}-planning`,
        title: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ 1',
        description: '–ó–∞–¥–∞—á–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è',
        status: 'planning' as TaskStatus,
        priority: 'medium' as TaskPriority,
        type: 'task' as TaskType,
        assigneeId: undefined,
        reporterId: 'user-1',
        watchers: ['user-1'],
        collaborators: [],
        dueDate: Date.now() + 2 * 24 * 60 * 60 * 1000, // +2 –¥–Ω—è
        startDate: undefined,
        estimatedHours: 4,
        actualHours: 0,
        tags: [],
        labels: [],
        attachments: [],
        subtasks: [],
        comments: [],
        isArchived: false,
        isPinned: false,
        isPrivate: false,
        allowComments: true,
        allowAttachments: true,
        parentTaskId: undefined,
        epicId: undefined,
        sprintId: undefined,
        createdAt: new Date(),
        updatedAt: new Date(),
        createdBy: 'user-1',
        updatedBy: 'user-1',
        statistics: {
          totalComments: 0,
          totalAttachments: 0,
          totalSubtasks: 0,
          completedSubtasks: 0,
          totalLikes: 0,
          totalViews: 0,
          lastActivityAt: Date.now(),
          timeInStatus: {
            planning: 0,
            in_progress: 0,
            review: 0,
            testing: 0,
            completed: 0,
            cancelled: 0,
            blocked: 0,
            on_hold: 0
          }
        },
        activities: [],
        timeSpent: 0,
        order: 0,
        customFields: {}
      },
      {
        id: 'test-task-2',
        boardId: boardId,
        columnId: `col-${boardId}-planning`,
        title: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ 2',
        description: '–ï—â–µ –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        status: 'planning' as TaskStatus,
        priority: 'high' as TaskPriority,
        type: 'task' as TaskType,
        assigneeId: undefined,
        reporterId: 'user-1',
        watchers: ['user-1'],
        collaborators: [],
        dueDate: Date.now() + 5 * 24 * 60 * 60 * 1000, // +5 –¥–Ω–µ–π
        startDate: undefined,
        estimatedHours: 8,
        actualHours: 0,
        tags: [],
        labels: [],
        attachments: [],
        subtasks: [],
        comments: [],
        isArchived: false,
        isPinned: false,
        isPrivate: false,
        allowComments: true,
        allowAttachments: true,
        parentTaskId: undefined,
        epicId: undefined,
        sprintId: undefined,
        createdAt: new Date(),
        updatedAt: new Date(),
        createdBy: 'user-1',
        updatedBy: 'user-1',
        statistics: {
          totalComments: 0,
          totalAttachments: 0,
          totalSubtasks: 0,
          completedSubtasks: 0,
          totalLikes: 0,
          totalViews: 0,
          lastActivityAt: Date.now(),
          timeInStatus: {
            planning: 0,
            in_progress: 0,
            review: 0,
            testing: 0,
            completed: 0,
            cancelled: 0,
            blocked: 0,
            on_hold: 0
          }
        },
        activities: [],
        timeSpent: 0,
        order: 1,
        customFields: {}
      }
    ],
    settings: {
      allowTaskCreation: true,
      allowTaskEditing: true,
      allowTaskMoving: true,
      allowTaskDeletion: true,
      allowSubtaskCreation: true,
      allowCommentCreation: true,
      allowAttachmentUpload: true,
      autoSortTasks: false,
      sortBy: 'order',
      sortDirection: 'asc'
    },
    statistics: {
      totalTasks: 2,
      completedTasks: 0,
      inProgressTasks: 0,
      overdueTasks: 0,
      averageTaskDuration: 0,
      totalComments: 0,
      totalAttachments: 0,
      lastTaskUpdate: Date.now()
    },
    createdAt: Date.now(),
    updatedAt: Date.now()
  },
  {
    id: `col-${boardId}-progress`,
    boardId: boardId,
    title: '–í —Ä–∞–±–æ—Ç–µ',
    description: '–ó–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç',
    icon: '‚ö°',
    color: '#f59e0b',
    order: 1,
    isLocked: false,
    isCollapsed: false,
    isStandard: true,
    tasks: [],
    settings: {
      allowTaskCreation: true,
      allowTaskEditing: true,
      allowTaskMoving: true,
      allowTaskDeletion: true,
      allowSubtaskCreation: true,
      allowCommentCreation: true,
      allowAttachmentUpload: true,
      autoSortTasks: false,
      sortBy: 'order',
      sortDirection: 'asc'
    },
    statistics: {
      totalTasks: 0,
      completedTasks: 0,
      inProgressTasks: 0,
      overdueTasks: 0,
      averageTaskDuration: 0,
      totalComments: 0,
      totalAttachments: 0,
      lastTaskUpdate: Date.now()
    },
    createdAt: Date.now(),
    updatedAt: Date.now()
  },
  {
    id: `col-${boardId}-review`,
    boardId: boardId,
    title: '–ü—Ä–æ–≤–µ—Ä–∫–∞',
    description: '–ó–∞–¥–∞—á–∏, –≥–æ—Ç–æ–≤—ã–µ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é',
    icon: 'üëÄ',
    color: '#8b5cf6',
    order: 2,
    isLocked: false,
    isCollapsed: false,
    isStandard: true,
    tasks: [],
    settings: {
      allowTaskCreation: true,
      allowTaskEditing: true,
      allowTaskMoving: true,
      allowTaskDeletion: true,
      allowSubtaskCreation: true,
      allowCommentCreation: true,
      allowAttachmentUpload: true,
      autoSortTasks: false,
      sortBy: 'order',
      sortDirection: 'asc'
    },
    statistics: {
      totalTasks: 0,
      completedTasks: 0,
      inProgressTasks: 0,
      overdueTasks: 0,
      averageTaskDuration: 0,
      totalComments: 0,
      totalAttachments: 0,
      lastTaskUpdate: Date.now()
    },
    createdAt: Date.now(),
    updatedAt: Date.now()
  },
  {
    id: `col-${boardId}-completed`,
    boardId: boardId,
    title: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ',
    description: '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏',
    icon: '‚úÖ',
    color: '#10b981',
    order: 3,
    isLocked: false,
    isCollapsed: false,
    isStandard: true,
    tasks: [],
    settings: {
      allowTaskCreation: true,
      allowTaskEditing: true,
      allowTaskMoving: true,
      allowTaskDeletion: true,
      allowSubtaskCreation: true,
      allowCommentCreation: true,
      allowAttachmentUpload: true,
      autoSortTasks: false,
      sortBy: 'order',
      sortDirection: 'asc'
    },
    statistics: {
      totalTasks: 0,
      completedTasks: 0,
      inProgressTasks: 0,
      overdueTasks: 0,
      averageTaskDuration: 0,
      totalComments: 0,
      totalAttachments: 0,
      lastTaskUpdate: Date.now()
    },
    createdAt: Date.now(),
    updatedAt: Date.now()
  },
  {
    id: `col-${boardId}-overdue`,
    boardId: boardId,
    title: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ',
    description: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏',
    icon: '‚ö†Ô∏è',
    color: '#DC2626',
    order: 4,
    isLocked: false,
    isCollapsed: false,
    isStandard: true,
    tasks: [],
    settings: {
      allowTaskCreation: false, // –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö
      allowTaskEditing: true,
      allowTaskMoving: true,
      allowTaskDeletion: true,
      allowSubtaskCreation: false,
      allowCommentCreation: true,
      allowAttachmentUpload: true,
      autoSortTasks: false,
      sortBy: 'dueDate',
      sortDirection: 'asc'
    },
    statistics: {
      totalTasks: 0,
      completedTasks: 0,
      inProgressTasks: 0,
      overdueTasks: 0,
      averageTaskDuration: 0,
      totalComments: 0,
      totalAttachments: 0,
      lastTaskUpdate: Date.now()
    },
    createdAt: Date.now(),
    updatedAt: Date.now()
  }
];

// ===== –ù–ê–ß–ê–õ–¨–ù–´–ï –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï =====

/*
const createTestBoard = (): Board => ({
  id: 'board-1',
  title: '–ü—Ä–æ–µ–∫—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
  description: '–û—Å–Ω–æ–≤–Ω–∞—è –¥–æ—Å–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –ø—Ä–æ–µ–∫—Ç–∞',
  icon: 'üöÄ',
  color: '#4A90E2',
  ownerId: 'user-1',
  teamId: undefined,
  members: [],
  columns: createStandardColumns('board-1'),
  settings: {
    allowMemberInvites: true,
    allowPublicView: true,
    allowComments: true,
    allowAttachments: true,
    allowTaskCreation: true,
    allowTaskEditing: true,
    defaultColumnTemplate: ['–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–í —Ä–∞–±–æ—Ç–µ', '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ', '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'],
    allowColumnCustomization: true,
    maxColumns: 10,
    allowSubtaskCreation: true,
    allowTaskAssignment: true,
    allowDueDateSetting: true,
    allowPrioritySetting: true,
    allowTagging: true,
    autoArchiveCompleted: false,
    archiveAfterDays: 30,
    autoAssignTasks: false,
    autoNotifyAssignees: false,
    emailNotifications: false,
    pushNotifications: false,
    desktopNotifications: false,
    showTaskDetails: 'all',
    showMemberActivity: true,
    showTaskHistory: true
  },
  statistics: {
    totalTasks: 0,
    completedTasks: 0,
    inProgressTasks: 0,
    overdueTasks: 0,
    totalMembers: 1,
    activeMembers: 1,
    lastActivity: Date.now(),
    completionRate: 0,
    averageTaskDuration: 0,
    totalComments: 0,
    totalAttachments: 0
  },
  createdAt: Date.now(),
  updatedAt: Date.now(),
  isArchived: false,
  isPublic: true,
  isTemplate: false,
  isFavorite: true
});
*/

// ===== –ù–ê–ß–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï =====

const getInitialState = (): BoardState => {
  // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è - –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
  return {
    boards: [],
    currentBoard: null,
    templates: [],
    isLoading: false,
    error: null,
  };
};

const initialState = getInitialState();

// ===== BOARD SLICE =====

const boardSlice = createSlice({
  name: 'boards',
  initialState,
  reducers: {
    // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–û–°–ö–ê–ú–ò =====
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–æ—Å–∫–∏
    setCurrentBoard: (state, action: PayloadAction<Board | null>) => {
      state.currentBoard = action.payload;
    },

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –¥–æ—Å–∫–∏
    addBoard: (state, action: PayloadAction<Board>) => {
      const board = action.payload;
      
      // –ï—Å–ª–∏ —É –¥–æ—Å–∫–∏ –Ω–µ—Ç –∫–æ–ª–æ–Ω–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
      if (!board.columns || board.columns.length === 0) {
        board.columns = createStandardColumns(board.id);
      }
      
      state.boards.push(board);
    },

    // –ó–∞–º–µ–Ω–∞ –≤—Å–µ—Ö –¥–æ—Å–æ–∫ (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞)
    replaceAllBoards: (state, action: PayloadAction<Board[]>) => {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–æ—Å–æ–∫
      const existingTasksMap = new Map<string, Map<string, Task[]>>();
      
      state.boards.forEach(board => {
        const boardTasks = new Map<string, Task[]>();
        board.columns.forEach(column => {
          if (column.tasks && column.tasks.length > 0) {
            boardTasks.set(column.id, [...column.tasks]);
          }
        });
        if (boardTasks.size > 0) {
          existingTasksMap.set(board.id, boardTasks);
        }
      });

      // –ó–∞–º–µ–Ω—è–µ–º –¥–æ—Å–∫–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
      state.boards = action.payload.map(board => {
        // –ï—Å–ª–∏ —É –¥–æ—Å–∫–∏ –Ω–µ—Ç –∫–æ–ª–æ–Ω–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
        if (!board.columns || board.columns.length === 0) {
          board.columns = createStandardColumns(board.id);
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–æ—Å–æ–∫
        const existingBoardTasks = existingTasksMap.get(board.id);
        if (existingBoardTasks) {
          board.columns.forEach(column => {
            const existingTasks = existingBoardTasks.get(column.id);
            if (existingTasks) {
              column.tasks = existingTasks;
            }
          });
        }
        
        return board;
      });
    },

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    toggleFavorite: (state, action: PayloadAction<string>) => {
      const boardId = action.payload;
      const board = state.boards.find(b => b.id === boardId);
      if (board) {
        board.isFavorite = !board.isFavorite;
      }
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∏
    deleteBoard: (state, action: PayloadAction<string>) => {
      const boardId = action.payload;
      state.boards = state.boards.filter(b => b.id !== boardId);
      
      // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º–∞—è –¥–æ—Å–∫–∞ –±—ã–ª–∞ —Ç–µ–∫—É—â–µ–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º currentBoard
      if (state.currentBoard?.id === boardId) {
        state.currentBoard = null;
      }
    },

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–æ—Å–æ–∫
    clearBoards: (state) => {
      state.boards = [];
      state.currentBoard = null;
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∏
    updateBoard: (state, action: PayloadAction<{ boardId: string; updates: Partial<Board> }>) => {
      const { boardId, updates } = action.payload;
      const board = state.boards.find(b => b.id === boardId);
      if (board) {
        // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ–ª–æ–Ω–∫–∏ —Å –∑–∞–¥–∞—á–∞–º–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
        if (updates.columns) {
          board.columns = updates.columns;
        } else {
          Object.assign(board, updates);
        }
        board.updatedAt = Date.now();
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º currentBoard –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –¥–æ—Å–∫–∞
      if (state.currentBoard?.id === boardId) {
        if (updates.columns) {
          state.currentBoard.columns = updates.columns;
        } else {
          Object.assign(state.currentBoard, updates);
        }
        state.currentBoard.updatedAt = Date.now();
      }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –¥–æ—Å–∫–µ (—Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á)
    updateBoardTasks: (state, action: PayloadAction<{ boardId: string; tasks: Task[] }>) => {
      const { boardId, tasks } = action.payload;
      const board = state.boards.find(b => b.id === boardId);
      if (board) {
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        board.columns.forEach(column => {
          column.tasks = tasks.filter(task => task.columnId === column.id);
        });
        board.updatedAt = Date.now();
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º currentBoard –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –¥–æ—Å–∫–∞
      if (state.currentBoard?.id === boardId) {
        state.currentBoard.columns.forEach(column => {
          column.tasks = tasks.filter(task => task.columnId === column.id);
        });
        state.currentBoard.updatedAt = Date.now();
      }
    },

    // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–õ–û–ù–ö–ê–ú–ò =====

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ –≤ –¥–æ—Å–∫—É
    addColumn: (state, action: PayloadAction<{ boardId: string; column: Column }>) => {
      const { boardId, column } = action.payload;
      const board = state.boards.find(b => b.id === boardId);
      if (board) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
        column.order = board.columns.length;
        board.columns.push(column);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º currentBoard –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –¥–æ—Å–∫–∞
        if (state.currentBoard?.id === boardId) {
          state.currentBoard.columns.push(column);
        }
      }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ (–≤–∫–ª—é—á–∞—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)
    updateColumn: (state, action: PayloadAction<{ boardId: string; columnId: string; updates: Partial<Column> }>) => {
      const { boardId, columnId, updates } = action.payload;
      const board = state.boards.find(b => b.id === boardId);
      if (board) {
        const columnIndex = board.columns.findIndex(c => c.id === columnId);
        if (columnIndex !== -1) {
          board.columns[columnIndex] = { 
            ...board.columns[columnIndex], 
            ...updates,
            updatedAt: Date.now()
          };
        }
      }
      // –û–±–Ω–æ–≤–ª—è–µ–º currentBoard –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –¥–æ—Å–∫–∞
      if (state.currentBoard?.id === boardId) {
        const columnIndex = state.currentBoard.columns.findIndex(c => c.id === columnId);
        if (columnIndex !== -1) {
          state.currentBoard.columns[columnIndex] = { 
            ...state.currentBoard.columns[columnIndex], 
            ...updates,
            updatedAt: Date.now()
          };
        }
      }
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    deleteColumn: (state, action: PayloadAction<{ boardId: string; columnId: string }>) => {
      const { boardId, columnId } = action.payload;
      const board = state.boards.find(b => b.id === boardId);
      if (board) {
        // –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É
        board.columns = board.columns.filter(c => c.id !== columnId);
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–æ–ª–æ–Ω–æ–∫
        board.columns.forEach((col, index) => {
          col.order = index;
        });
      }
      // –û–±–Ω–æ–≤–ª—è–µ–º currentBoard –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –¥–æ—Å–∫–∞
      if (state.currentBoard?.id === boardId) {
        state.currentBoard.columns = state.currentBoard.columns.filter(c => c.id !== columnId);
        state.currentBoard.columns.forEach((col, index) => {
          col.order = index;
        });
      }
    },

    // –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
    reorderColumns: (state, action: PayloadAction<{ boardId: string; columnIds: string[] }>) => {
      const { boardId, columnIds } = action.payload;
      const board = state.boards.find(b => b.id === boardId);
      if (board) {
        const reorderedColumns = columnIds.map((id, index) => {
          const col = board.columns.find(c => c.id === id);
          if (col) {
            col.order = index;
            return col;
          }
          return null;
        }).filter(Boolean) as Column[];
        board.columns = reorderedColumns;
      }
      // –û–±–Ω–æ–≤–ª—è–µ–º currentBoard –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –¥–æ—Å–∫–∞
      if (state.currentBoard?.id === boardId) {
        const reorderedColumns = columnIds.map((id, index) => {
          const col = state.currentBoard!.columns.find(c => c.id === id);
          if (col) {
            col.order = index;
            return col;
          }
          return null;
        }).filter(Boolean) as Column[];
        state.currentBoard.columns = reorderedColumns;
      }
    },

    // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ß–ê–ú–ò =====

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
    addTaskToColumn: (state, action: PayloadAction<{ boardId: string; columnId: string; task: Task }>) => {
      const { boardId, columnId, task } = action.payload;
      const board = state.boards.find(b => b.id === boardId);
      if (board) {
        const column = board.columns.find(c => c.id === columnId);
        if (column) {
          column.tasks.push(task);
          
          // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
          notificationService.notifyTaskCreated(task, board, column);
          
          // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ–ª–æ–Ω–∫—É "–ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏" (planning), —Å–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          const columnType = getColumnByStatus(task.status);
          if (columnType === 'planning') {
            notificationService.notifyNewTaskInInbox(task, board, column);
          }
        }
      }
      // –û–±–Ω–æ–≤–ª—è–µ–º currentBoard –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –¥–æ—Å–∫–∞
      if (state.currentBoard?.id === boardId) {
        const column = state.currentBoard.columns.find(c => c.id === columnId);
        if (column) {
          column.tasks.push(task);
        }
      }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    updateTask: (state, action: PayloadAction<{ boardId: string; taskId: string; updates: Partial<Task> }>) => {
      const { boardId, taskId, updates } = action.payload;
      const board = state.boards.find(b => b.id === boardId);
      if (board) {
        board.columns.forEach(column => {
          const taskIndex = column.tasks.findIndex(t => t.id === taskId);
          if (taskIndex !== -1) {
            column.tasks[taskIndex] = { ...column.tasks[taskIndex], ...updates };
          }
        });
      }
      // –û–±–Ω–æ–≤–ª—è–µ–º currentBoard –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –¥–æ—Å–∫–∞
      if (state.currentBoard?.id === boardId) {
        state.currentBoard.columns.forEach(column => {
          const taskIndex = column.tasks.findIndex(t => t.id === taskId);
          if (taskIndex !== -1) {
            column.tasks[taskIndex] = { ...column.tasks[taskIndex], ...updates };
          }
        });
      }
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    deleteTask: (state, action: PayloadAction<{ boardId: string; taskId: string }>) => {
      const { boardId, taskId } = action.payload;
      const board = state.boards.find(b => b.id === boardId);
      if (board) {
        board.columns.forEach(column => {
          column.tasks = column.tasks.filter(t => t.id !== taskId);
        });
      }
      // –û–±–Ω–æ–≤–ª—è–µ–º currentBoard –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –¥–æ—Å–∫–∞
      if (state.currentBoard?.id === boardId) {
        state.currentBoard.columns.forEach(column => {
          column.tasks = column.tasks.filter(t => t.id !== taskId);
        });
      }
    },

    // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏
    moveTask: (state, action: PayloadAction<{ 
      boardId: string; 
      taskId: string; 
      fromColumnId: string; 
      toColumnId: string; 
      newStatus: string;
      newOrder?: number;
    }>) => {
      const { boardId, taskId, fromColumnId, toColumnId, newStatus, newOrder } = action.payload;
      const board = state.boards.find(b => b.id === boardId);
      if (board) {
        // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
        const fromColumn = board.columns.find(c => c.id === fromColumnId);
        if (fromColumn) {
          fromColumn.tasks = fromColumn.tasks.filter(t => t.id !== taskId);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Ü–µ–ª–µ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
        const toColumn = board.columns.find(c => c.id === toColumnId);
        if (toColumn) {
          const task = board.columns.flatMap(c => c.tasks).find(t => t.id === taskId);
          if (task) {
            const updatedTask = { ...task, status: newStatus as TaskStatus };
            if (newOrder !== undefined) {
              updatedTask.order = newOrder;
            }
            toColumn.tasks.push(updatedTask);
          }
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º currentBoard –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –¥–æ—Å–∫–∞
      if (state.currentBoard?.id === boardId) {
        // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
        const fromColumn = state.currentBoard.columns.find(c => c.id === fromColumnId);
        if (fromColumn) {
          fromColumn.tasks = fromColumn.tasks.filter(t => t.id !== taskId);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Ü–µ–ª–µ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
        const toColumn = state.currentBoard.columns.find(c => c.id === toColumnId);
        if (toColumn) {
          const task = state.currentBoard.columns.flatMap(c => c.tasks).find(t => t.id === taskId);
          if (task) {
            const updatedTask = { ...task, status: newStatus as TaskStatus };
            if (newOrder !== undefined) {
              updatedTask.order = newOrder;
            }
            toColumn.tasks.push(updatedTask);
          }
        }
      }
    },

    // –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –≤ –∫–æ–ª–æ–Ω–∫–µ
    reorderTasksInColumn: (state, action: PayloadAction<{ 
      boardId: string; 
      columnId: string; 
      taskIds: string[] 
    }>) => {
      const { boardId, columnId, taskIds } = action.payload;
      const board = state.boards.find(b => b.id === boardId);
      if (board) {
        const column = board.columns.find(c => c.id === columnId);
        if (column) {
          const reorderedTasks = taskIds.map((id, index) => {
            const task = column.tasks.find(t => t.id === id);
            if (task) {
              task.order = index;
              return task;
            }
            return null;
          }).filter(Boolean) as Task[];
          column.tasks = reorderedTasks;
        }
      }
      // –û–±–Ω–æ–≤–ª—è–µ–º currentBoard –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –¥–æ—Å–∫–∞
      if (state.currentBoard?.id === boardId) {
        const column = state.currentBoard.columns.find(c => c.id === columnId);
        if (column) {
          const reorderedTasks = taskIds.map((id, index) => {
            const task = column.tasks.find(t => t.id === id);
            if (task) {
              task.order = index;
              return task;
            }
            return null;
          }).filter(Boolean) as Task[];
          column.tasks = reorderedTasks;
        }
      }
    },

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
    moveTaskByStatus: (state, action: PayloadAction<{ 
      boardId: string; 
      taskId: string; 
      newStatus: TaskStatus;
    }>) => {
      const { boardId, taskId, newStatus } = action.payload;
      const board = state.boards.find(b => b.id === boardId);
      if (!board) return;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –Ω–æ–≤–æ–º—É —Å—Ç–∞—Ç—É—Å—É
      const columnType = getColumnByStatus(newStatus);
      const targetColumn = findColumnByType(board.columns, columnType);
      
      if (!targetColumn) return;
      
      // –ò—â–µ–º –∑–∞–¥–∞—á—É –≤–æ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
      let sourceColumn: Column | null = null;
      let task: Task | null = null;
      
      for (const col of board.columns) {
        const foundTask = col.tasks.find(t => t.id === taskId);
        if (foundTask) {
          sourceColumn = col;
          task = foundTask;
          break;
        }
      }
      
      if (!sourceColumn || !task) return;
      
      // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤ —Ü–µ–ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      if (sourceColumn.id === targetColumn.id) {
        task.status = newStatus;
        task.updatedAt = new Date();
      } else {
        // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
        sourceColumn.tasks = sourceColumn.tasks.filter(t => t.id !== taskId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ü–µ–ª–µ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
        const updatedTask = { 
          ...task, 
          status: newStatus,
          columnId: targetColumn.id,
          updatedAt: new Date()
        };
        
        targetColumn.tasks.push(updatedTask);
        
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
        notificationService.notifyTaskMoved(updatedTask, board, sourceColumn, targetColumn);
        
        // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∫–æ–ª–æ–Ω–∫—É "–ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏" (planning), —Å–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (columnType === 'planning') {
          notificationService.notifyNewTaskInInbox(updatedTask, board, targetColumn);
        }
        
        // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if (newStatus === 'completed') {
          notificationService.notifyTaskCompleted(updatedTask, board, targetColumn);
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º currentBoard –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –¥–æ—Å–∫–∞
      if (state.currentBoard?.id === boardId) {
        const currentSourceColumn = state.currentBoard.columns.find(c => c.id === sourceColumn!.id);
        const currentTargetColumn = state.currentBoard.columns.find(c => c.id === targetColumn.id);
        
        if (currentSourceColumn && currentTargetColumn) {
          if (sourceColumn!.id === targetColumn.id) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–ª–æ–Ω–∫–µ
            const currentTask = currentSourceColumn.tasks.find(t => t.id === taskId);
            if (currentTask) {
              currentTask.status = newStatus;
              currentTask.updatedAt = new Date();
            }
          } else {
            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞–¥–∞—á—É –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏
            currentSourceColumn.tasks = currentSourceColumn.tasks.filter(t => t.id !== taskId);
            const updatedTask = { 
              ...task!, 
              status: newStatus,
              columnId: targetColumn.id,
              updatedAt: new Date()
            };
            currentTargetColumn.tasks.push(updatedTask);
          }
        }
      }
    },
  },
});

// ===== –≠–ö–°–ü–û–†–¢ –î–ï–ô–°–¢–í–ò–ô =====

export const {
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∞–º–∏
  setCurrentBoard,
  addBoard,
  replaceAllBoards,
  toggleFavorite,
  deleteBoard,
  clearBoards,
  updateBoard,
  updateBoardTasks,
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∞–º–∏
  addColumn,
  updateColumn,
  deleteColumn,
  reorderColumns,
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
  addTaskToColumn,
  updateTask,
  deleteTask,
  moveTask,
  reorderTasksInColumn,
  moveTaskByStatus,
} = boardSlice.actions;

export default boardSlice.reducer;

// ===== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –ü–ï–†–ï–ú–ï–©–ï–ù–ò–Ø –ó–ê–î–ê–ß =====

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∑–∞–¥–∞—á–∏
const getColumnByStatus = (status: TaskStatus): string => {
  switch (status) {
    case 'planning':
      return 'planning';
    case 'in_progress':
      return 'progress';
    case 'review':
      return 'review';
    case 'completed':
      return 'completed';
    default:
      return 'planning'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ —Ç–∏–ø—É
const findColumnByType = (columns: Column[], columnType: string): Column | null => {
  return columns.find(col => {
    const columnTitle = col.title.toLowerCase();
    switch (columnType) {
      case 'planning':
        return columnTitle.includes('–Ω–∞—á–∞–ª–æ') || columnTitle.includes('planning');
      case 'progress':
        return columnTitle.includes('—Ä–∞–±–æ—Ç–∞') || columnTitle.includes('progress');
      case 'review':
        return columnTitle.includes('–ø—Ä–æ–≤–µ—Ä–∫–∞') || columnTitle.includes('review');
      case 'completed':
        return columnTitle.includes('–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ') || columnTitle.includes('completed');
      default:
        return false;
    }
  }) || null;
};


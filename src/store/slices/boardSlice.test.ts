// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã boardSlice
// –≠—Ç–æ—Ç —Ñ–∞–π–ª –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

import { configureStore } from '@reduxjs/toolkit';
import boardReducer, { setCurrentBoard } from './boardSlice';
import type { Board } from '../../types/board';

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π store
const testStore = configureStore({
  reducer: {
    boards: boardReducer
  }
});

// –¢–µ—Å—Ç–æ–≤–∞—è –¥–æ—Å–∫–∞
const testBoard: Board = {
  id: 'test-board-1',
  title: '–¢–µ—Å—Ç–æ–≤–∞—è –¥–æ—Å–∫–∞',
  description: '–î–æ—Å–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
  icon: 'üß™',
  color: '#FF0000',
  ownerId: 'test-user-1',
  teamId: undefined,
  members: [],
  columns: [],
  settings: {
    allowMemberInvites: true,
    allowPublicView: false,
    allowComments: true,
    allowAttachments: true,
    allowTaskCreation: true,
    allowTaskEditing: true,
    defaultColumnTemplate: ['planning', 'in_progress', 'completed'],
    allowColumnCustomization: true,
    maxColumns: 10,
    allowSubtaskCreation: true,
    allowTaskAssignment: true,
    allowDueDateSetting: true,
    allowPrioritySetting: true,
    allowTagging: true,
    autoArchiveCompleted: true,
    archiveAfterDays: 30,
    autoAssignTasks: false,
    autoNotifyAssignees: true,
    emailNotifications: true,
    pushNotifications: true,
    desktopNotifications: true,
    showTaskDetails: 'members',
    showMemberActivity: true,
    showTaskHistory: true
  },
  statistics: {
    totalTasks: 0,
    completedTasks: 0,
    inProgressTasks: 0,
    overdueTasks: 0,
    totalMembers: 1,
    activeMembers: 1,
    lastActivity: Date.now(),
    completionRate: 0,
    averageTaskDuration: 0,
    totalComments: 0,
    totalAttachments: 0
  },
  isTemplate: false,
  templateId: undefined,
  createdAt: Date.now(),
  updatedAt: Date.now(),
  isArchived: false,
  isPublic: false
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
export function runBoardSliceTests() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ boardSlice...');
  
  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  console.log('üìä –¢–µ—Å—Ç 1: –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
  const initialState = testStore.getState();
  console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å–æ–∫:', initialState.boards.boards.length);
  console.log('–¢–µ–∫—É—â–∞—è –¥–æ—Å–∫–∞:', initialState.boards.currentBoard);
  
  // –¢–µ—Å—Ç 2: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—É—â—É—é
  console.log('\nüìä –¢–µ—Å—Ç 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–æ—Å–∫–∏');
  testStore.dispatch(setCurrentBoard(testBoard));
  const stateAfterSetCurrent = testStore.getState();
  console.log('–¢–µ–∫—É—â–∞—è –¥–æ—Å–∫–∞:', stateAfterSetCurrent.boards.currentBoard);
  
  // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  console.log('\nüìä –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å–∫–∏:', stateAfterSetCurrent.boards.currentBoard?.statistics);
  
  console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof window !== 'undefined') {
  // @ts-expect-error - –¥–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç window –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  window.runBoardSliceTests = runBoardSliceTests;
  console.log('üß™ –¢–µ—Å—Ç—ã boardSlice –≥–æ—Ç–æ–≤—ã –∫ –∑–∞–ø—É—Å–∫—É. –í—ã–∑–æ–≤–∏—Ç–µ window.runBoardSliceTests() –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞');
}
